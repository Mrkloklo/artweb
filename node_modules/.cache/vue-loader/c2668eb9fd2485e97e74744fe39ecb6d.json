{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gujiahao/Documents/work/github/artweb/src/components/verifycode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/components/verifycode.vue","mtime":1588230106537},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nexport default {\n  name: 'VerifyCode',\n  props: {\n    len: {\n      type: Number,\n      default: 4\n    },\n    minfontsize: {\n      type: Number,\n      default: 20\n    },\n    maxfontsize: {\n      type: Number,\n      default: 35\n    },\n    radius: {\n      type: Number,\n      default: 1\n    },\n    bgColor: {\n      type: String,\n      default: '#444'\n    },\n    colors: Array,\n    width: {\n      type: Number,\n      default: 130\n    },\n    height: {\n      type: Number,\n      default: 60\n    },\n    enableCaseValidation: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      verifyStr: ''\n    };\n  },\n  methods: {\n    update () {\n      this._drawVerify();\n    },\n    validate (value) {\n      const { verifyStr } = this;\n\n      if (this.enableCaseValidation) {\n        return verifyStr === value;\n      }\n\n      return verifyStr.toLowerCase() === value.toLowerCase();\n    },\n    /**\n     * 生成随机数\n     * @param {Number} min 最小值\n     * @param {Number} max 最大值\n     * @returns {Number} 随机数\n     * @private\n     */\n    _randomNum (min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    /**\n     * 生成一个随机色\n     * @param {Number} min 最小值\n     * @param {Number} max 最大值\n     * @returns {String} 颜色值\n     * @private\n     */\n    _randomColor (min, max) {\n      const r = this._randomNum(min, max);\n      const g = this._randomNum(min, max);\n      const b = this._randomNum(min, max);\n\n      return `rgb(${r},${g},${b})`;\n    },\n    /**\n     * 绘制验证码\n     */\n    _drawVerify () {\n      const { canvas } = this.$refs;\n      const ctx = canvas.getContext('2d');\n      const { _randomNum } = this;\n      const { _randomColor } = this;\n      const { width } = this;\n      const { height } = this;\n      const strLen = this.len;\n      const { colors } = this;\n\n      ctx.textBaseline = 'middle';\n      this.verifyStr = '';\n\n      // 绘制背景色\n      ctx.fillStyle = this._randomColor(180, 240);\n      ctx.fillRect(0, 0, width, height);\n\n      // 绘制文字\n      const str = 'ABCEFGHJKLMNPQRSTWXY123456789';\n\n      for (let i = 0; i < strLen; i++) {\n        const txt = str[_randomNum(0, str.length)];\n\n        if (colors && colors[i]) {\n          ctx.fillStyle = colors[i];\n        } else {\n          ctx.fillStyle = _randomColor(50, 160); // 随机生成字体颜色\n        }\n        ctx.font = `${_randomNum(this.minfontsize, this.maxfontsize)}px SimHei`; // 随机生成字体大小\n\n        const x = width / strLen + i * 25;\n        const y = _randomNum(25, 45);\n        const deg = _randomNum(-45, 45);\n\n        this.verifyStr += txt;\n        // 修改坐标原点和旋转角度\n        ctx.translate(x, y);\n        ctx.rotate(deg * Math.PI / 180);\n        ctx.fillText(txt, 0, 0);\n\n        // 恢复坐标原点和旋转角度\n        ctx.rotate(-deg * Math.PI / 180);\n        ctx.translate(-x, -y);\n      }\n\n      // 绘制干扰线\n      for (let i = 0; i < 8; i++) {\n        ctx.strokeStyle = _randomColor(40, 180);\n        ctx.beginPath();\n        ctx.moveTo(_randomNum(0, width), _randomNum(0, height));\n        ctx.lineTo(_randomNum(0, width), _randomNum(0, height));\n        ctx.stroke();\n      }\n\n      // 绘制干扰点\n      for (let i = 0; i < 100; i++) {\n        ctx.fillStyle = _randomColor(0, 255);\n        ctx.beginPath();\n        ctx.arc(_randomNum(0, width), _randomNum(0, height), 1, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }\n  },\n  mounted () {\n    this._drawVerify();\n  }\n};\n",{"version":3,"sources":["verifycode.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"verifycode.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <canvas :width=\"width\" :height=\"height\" :style=\"`border: 1px solid ${bgColor}`\" ref=\"canvas\"></canvas>\n</template>\n\n<script>\nexport default {\n  name: 'VerifyCode',\n  props: {\n    len: {\n      type: Number,\n      default: 4\n    },\n    minfontsize: {\n      type: Number,\n      default: 20\n    },\n    maxfontsize: {\n      type: Number,\n      default: 35\n    },\n    radius: {\n      type: Number,\n      default: 1\n    },\n    bgColor: {\n      type: String,\n      default: '#444'\n    },\n    colors: Array,\n    width: {\n      type: Number,\n      default: 130\n    },\n    height: {\n      type: Number,\n      default: 60\n    },\n    enableCaseValidation: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      verifyStr: ''\n    };\n  },\n  methods: {\n    update () {\n      this._drawVerify();\n    },\n    validate (value) {\n      const { verifyStr } = this;\n\n      if (this.enableCaseValidation) {\n        return verifyStr === value;\n      }\n\n      return verifyStr.toLowerCase() === value.toLowerCase();\n    },\n    /**\n     * 生成随机数\n     * @param {Number} min 最小值\n     * @param {Number} max 最大值\n     * @returns {Number} 随机数\n     * @private\n     */\n    _randomNum (min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    /**\n     * 生成一个随机色\n     * @param {Number} min 最小值\n     * @param {Number} max 最大值\n     * @returns {String} 颜色值\n     * @private\n     */\n    _randomColor (min, max) {\n      const r = this._randomNum(min, max);\n      const g = this._randomNum(min, max);\n      const b = this._randomNum(min, max);\n\n      return `rgb(${r},${g},${b})`;\n    },\n    /**\n     * 绘制验证码\n     */\n    _drawVerify () {\n      const { canvas } = this.$refs;\n      const ctx = canvas.getContext('2d');\n      const { _randomNum } = this;\n      const { _randomColor } = this;\n      const { width } = this;\n      const { height } = this;\n      const strLen = this.len;\n      const { colors } = this;\n\n      ctx.textBaseline = 'middle';\n      this.verifyStr = '';\n\n      // 绘制背景色\n      ctx.fillStyle = this._randomColor(180, 240);\n      ctx.fillRect(0, 0, width, height);\n\n      // 绘制文字\n      const str = 'ABCEFGHJKLMNPQRSTWXY123456789';\n\n      for (let i = 0; i < strLen; i++) {\n        const txt = str[_randomNum(0, str.length)];\n\n        if (colors && colors[i]) {\n          ctx.fillStyle = colors[i];\n        } else {\n          ctx.fillStyle = _randomColor(50, 160); // 随机生成字体颜色\n        }\n        ctx.font = `${_randomNum(this.minfontsize, this.maxfontsize)}px SimHei`; // 随机生成字体大小\n\n        const x = width / strLen + i * 25;\n        const y = _randomNum(25, 45);\n        const deg = _randomNum(-45, 45);\n\n        this.verifyStr += txt;\n        // 修改坐标原点和旋转角度\n        ctx.translate(x, y);\n        ctx.rotate(deg * Math.PI / 180);\n        ctx.fillText(txt, 0, 0);\n\n        // 恢复坐标原点和旋转角度\n        ctx.rotate(-deg * Math.PI / 180);\n        ctx.translate(-x, -y);\n      }\n\n      // 绘制干扰线\n      for (let i = 0; i < 8; i++) {\n        ctx.strokeStyle = _randomColor(40, 180);\n        ctx.beginPath();\n        ctx.moveTo(_randomNum(0, width), _randomNum(0, height));\n        ctx.lineTo(_randomNum(0, width), _randomNum(0, height));\n        ctx.stroke();\n      }\n\n      // 绘制干扰点\n      for (let i = 0; i < 100; i++) {\n        ctx.fillStyle = _randomColor(0, 255);\n        ctx.beginPath();\n        ctx.arc(_randomNum(0, width), _randomNum(0, height), 1, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }\n  },\n  mounted () {\n    this._drawVerify();\n  }\n};\n</script>\n"]}]}