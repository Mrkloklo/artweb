{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/sha1.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/sha1.js","mtime":1588230106653},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\n\n/*\n * @Author: guotq\n * @Date: 2019-04-02 17:04:21\n * @Last Modified by: guotq\n * @Last Modified time: 2019-04-03 09:02:16\n * @Description: 移值 M7 框架中的 util.sha1\n */\nvar hexcase = 0;\nvar chrsz = 8;\n\nvar safeAdd = function safeAdd(x, y) {\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n};\n\nvar rol = function rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n};\n\nvar sha1Ft = function sha1Ft(t, b, c, d) {\n  if (t < 20) {\n    return b & c | ~b & d;\n  }\n\n  if (t < 40) {\n    return b ^ c ^ d;\n  }\n\n  if (t < 60) {\n    return b & c | b & d | c & d;\n  }\n\n  return b ^ c ^ d;\n};\n\nvar str2binb = function str2binb(str) {\n  var bin = [];\n  var mask = (1 << chrsz) - 1;\n\n  for (var i = 0; i < str.length * chrsz; i += chrsz) {\n    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << 32 - chrsz - i % 32;\n  }\n\n  return bin;\n};\n\nvar sha1Kt = function sha1Kt(t) {\n  return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n};\n\nvar Utf8Encode = function Utf8Encode(string) {\n  string = string.replace(/\\r\\n/g, '\\n');\n  var utftext = '';\n\n  for (var n = 0; n < string.length; n++) {\n    var c = string.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode(c >> 6 | 192);\n      utftext += String.fromCharCode(c & 63 | 128);\n    } else {\n      utftext += String.fromCharCode(c >> 12 | 224);\n      utftext += String.fromCharCode(c >> 6 & 63 | 128);\n      utftext += String.fromCharCode(c & 63 | 128);\n    }\n  }\n\n  return utftext;\n};\n\nvar binb2hex = function binb2hex(binarray) {\n  var hexTab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';\n  var str = '';\n\n  for (var i = 0; i < binarray.length * 4; i++) {\n    str += hexTab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) + hexTab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 0xF);\n  }\n\n  return str;\n};\n\nvar coreSha1 = function coreSha1(x, len) {\n  x[len >> 5] |= 0x80 << 24 - len % 32;\n  x[(len + 64 >> 9 << 4) + 15] = len;\n  var w = Array(80);\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n  var e = -1009589776;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    var olde = e;\n\n    for (var j = 0; j < 80; j++) {\n      if (j < 16) {\n        w[j] = x[i + j];\n      } else {\n        w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n      }\n\n      var t = safeAdd(safeAdd(rol(a, 5), sha1Ft(j, b, c, d)), safeAdd(safeAdd(e, w[j]), sha1Kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n    e = safeAdd(e, olde);\n  }\n\n  return [a, b, c, d, e];\n};\n\nexport default {\n  /**\n   * sha1_hex散列，16进制字符串形式\n   * @param {String} s 内容\n   * @return {String} 返回密文,hex字符串\n   */\n  hex: function hex(s) {\n    s = Utf8Encode(s);\n    return binb2hex(coreSha1(str2binb(s), s.length * chrsz));\n  }\n};",null]}