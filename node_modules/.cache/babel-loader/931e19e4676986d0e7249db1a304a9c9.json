{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/request.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/request.js","mtime":1588230106653},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import \"vant/es/toast/style\";\nimport _Toast from \"vant/es/toast\";\nimport axios from 'axios';\nimport Config from '@shared/config';\nimport Util from \"./index\";\nimport qs from 'qs';\nvar defaultSettings = {\n  type: 'post',\n  url: '',\n  data: '',\n  dataType: 'json',\n  timeout: 10000,\n  headers: {},\n  contentType: 'application/x-www-form-urlencoded',\n  withCredentials: false,\n  delay: 0,\n  isAutoProxy: Config.ajax.isAutoProxy,\n  baseURL: '',\n  transformRequest: [],\n  transformResponse: [],\n  paramsSerializer: null,\n  adapter: null,\n  params: null,\n  xsrfCookieName: '',\n  xsrfHeaderName: '',\n  uploading: function uploading(progressEvent) {},\n  downloading: function downloading(progressEvent) {},\n  maxContentLength: 2000,\n  validateStatus: null,\n  auth: null,\n  proxy: null,\n  error: function error() {},\n  complete: function complete() {}\n};\nvar params = {};\nvar ejsVer = Config.ejsVer;\n\nvar setHeader = function setHeader(key, value) {\n  var _params = params,\n      headers = _params.headers;\n  headers[key] = value;\n};\n\nvar createInterceptors = function createInterceptors() {\n  axios.interceptors.request.use(function (config) {\n    // 判断是否存在token，如果存在的话，则每个http header都加上token\n    if (ejsVer === 3 && Util.os.ejs) {\n      ejs.auth.getToken({\n        success: function success(result) {\n          config.headers.Authorization = \"Bearer \".concat(result.access_token);\n        }\n      });\n    } else if (ejsVer === 3) {\n      config.withCredentials = true;\n    }\n\n    return config;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n};\n\nfunction ajax(options) {\n  options = Util.extend(defaultSettings, options);\n  params = {\n    url: options.url,\n    method: options.type,\n    data: options.data,\n    headers: options.headers,\n    baseURL: options.baseURL,\n    responseType: options.dataType,\n    withCredentials: options.withCredentials,\n    transformRequest: options.transformRequest,\n    transformResponse: options.transformResponse,\n    params: options.params,\n    paramsSerializer: options.paramsSerializer,\n    timeout: options.timeout,\n    adapter: options.adapter,\n    auth: options.auth,\n    onUploadProgress: options.uploading,\n    onDownloadProgress: options.downloading,\n    maxContentLength: options.maxContentLength,\n    validateStatus: options.validateStatus,\n    proxy: options.proxy\n  };\n  var _options = options,\n      delay = _options.delay,\n      contentType = _options.contentType,\n      headers = _options.headers,\n      isAutoProxy = _options.isAutoProxy,\n      error = _options.error,\n      success = _options.success,\n      complete = _options.complete,\n      beforeSend = _options.beforeSend; // 设置重试延迟\n\n  axios.defaults.retryDelay = delay;\n\n  for (var key in headers) {\n    setHeader(key, headers[key]);\n  }\n\n  if (contentType) {\n    setHeader('Content-Type', contentType);\n\n    if (contentType === 'application/x-www-form-urlencoded; charset=UTF-8' || contentType === 'application/x-www-form-urlencoded') {\n      params.data = qs.stringify(options.data);\n    }\n  }\n\n  if (isAutoProxy) {\n    // 创建拦截器\n    createInterceptors();\n  }\n\n  if (typeof beforeSend === 'function') {\n    beforeSend(axios);\n  }\n\n  if (typeof success !== 'function') {\n    return axios(params);\n  } else {\n    axios(params).then(function (response) {\n      var status = response.status,\n          statusText = response.statusText,\n          data = response.data;\n\n      if (status !== 200 && statusText !== 'OK' || typeof data.errcode === 'number') {\n        error(data);\n\n        if (Config.ajax.isAutoErrToast) {\n          _Toast(data.errmsg);\n        }\n      } else {\n        success(data, response);\n      }\n    }).catch(function (err) {\n      error(err);\n    }).then(function () {\n      complete();\n    });\n  }\n}\n\nfunction ajaxAll() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return axios.all(args);\n}\n\nexport { ajax, ajaxAll };",null]}