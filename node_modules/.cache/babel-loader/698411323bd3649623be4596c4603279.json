{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/public/ejs/v3/ejs.dd.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/public/ejs/v3/ejs.dd.js","mtime":1588230106464},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import _typeof from \"/Users/gujiahao/Documents/work/github/artweb/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\n\n/*!\n * ejsv3 v3.2.6d\n * (c) 2017-2019 \n * Released under the BSD-3-Clause License.\n * \n */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory() : typeof define === 'function' && define.amd ? define(factory) : factory();\n})(window, function () {\n  'use strict';\n\n  function callDDByArgs(args, api) {\n    var options = args[0];\n    var resolve = args[1];\n    var reject = args[2];\n\n    options.onSuccess = function (result) {\n      var newResult = result;\n\n      if (options.dataFilter) {\n        newResult = options.dataFilter(result);\n      }\n\n      options.success && options.success(newResult);\n      resolve && resolve(newResult);\n    };\n\n    options.onFail = function (error) {\n      options.error && options.error(error);\n      reject && reject(error);\n    };\n\n    api(options);\n  }\n\n  function uiMixin(hybrid) {\n    var hybridJs = hybrid;\n    var innerUtil = hybridJs.innerUtil;\n    hybridJs.extendModule('ui', [{\n      namespace: 'toast',\n      os: ['dd'],\n      defaultParams: {\n        message: ''\n      },\n      runCode: function runCode() {\n        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        } // 兼容字符串形式\n\n\n        var args = innerUtil.compatibleStringParamsToObject.call(this, rest, 'message'); // 有参数形式不一样，需要重新定义\n\n        args[0] = innerUtil.extend(args[0], {\n          // icon样式，有success和error，默认为空 0.0.2\n          icon: '',\n          // 提示信息\n          text: args[0].message,\n          // 显示持续时间，单位秒，默认按系统规范[android只有两种(<=2s >2s)]\n          duration: 2,\n          // 延迟显示，单位秒，默认0\n          delay: 0\n        });\n        callDDByArgs(args, dd.device.notification.toast);\n      }\n    }, {\n      namespace: 'alert',\n      os: ['dd'],\n      defaultParams: {\n        title: '',\n        message: '',\n        buttonName: '确定'\n      },\n      runCode: function runCode() {\n        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          rest[_key2] = arguments[_key2];\n        } // 兼容字符串形式\n\n\n        var args = innerUtil.compatibleStringParamsToObject.call(this, rest, 'message', 'title', 'buttonName'); // 参数形式一样，无需重新定义\n\n        callDDByArgs(args, dd.device.notification.alert);\n      }\n    }, {\n      namespace: 'confirm',\n      os: ['dd'],\n      defaultParams: {\n        title: '',\n        message: '',\n        buttonLabels: ['取消', '确定']\n      },\n      runCode: function runCode() {\n        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          rest[_key3] = arguments[_key3];\n        }\n\n        var args = rest;\n\n        args[0].dataFilter = function (result) {\n          return {\n            which: result.buttonIndex\n          };\n        }; // 参数形式一样，无需重新定义\n\n\n        callDDByArgs(args, dd.device.notification.confirm);\n      }\n    }, {\n      namespace: 'prompt',\n      os: ['dd'],\n      defaultParams: {\n        title: '',\n        text: '',\n        hint: '',\n        lines: 1,\n        maxLength: 10000,\n        buttonLabels: ['取消', '确定']\n      },\n      runCode: function runCode() {\n        for (var _len4 = arguments.length, rest = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          rest[_key4] = arguments[_key4];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          message: args[0].text,\n          defaultText: args[0].hint\n        });\n\n        args[0].dataFilter = function (result) {\n          return {\n            which: result.buttonIndex,\n            content: result.value\n          };\n        }; // 参数形式一样，无需重新定义\n\n\n        callDDByArgs(args, dd.device.notification.prompt);\n      }\n    }, {\n      namespace: 'showWaiting',\n      os: ['dd'],\n      defaultParams: {\n        message: ''\n      },\n      runCode: function runCode() {\n        for (var _len5 = arguments.length, rest = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          rest[_key5] = arguments[_key5];\n        }\n\n        var args = innerUtil.compatibleStringParamsToObject.call(this, rest, 'message');\n        args[0] = innerUtil.extend(args[0], {\n          // 提示信息\n          text: args[0].message,\n          showIcon: true\n        });\n        callDDByArgs(args, dd.device.notification.showPreloader);\n      }\n    }, {\n      namespace: 'closeWaiting',\n      os: ['dd'],\n      runCode: function runCode() {\n        for (var _len6 = arguments.length, rest = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          rest[_key6] = arguments[_key6];\n        }\n\n        callDDByArgs(rest, dd.device.notification.hidePreloader);\n      }\n    }, {\n      namespace: 'actionSheet',\n      os: ['dd'],\n      defaultParams: {\n        title: '',\n        items: []\n      },\n      runCode: function runCode() {\n        for (var _len7 = arguments.length, rest = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          rest[_key7] = arguments[_key7];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          cancelButton: '取消',\n          otherButtons: args[0].items\n        });\n        var originalItems = args[0].items;\n\n        args[0].dataFilter = function (result) {\n          return {\n            which: result.buttonIndex,\n            content: originalItems[result.buttonIndex]\n          };\n        };\n\n        callDDByArgs(args, dd.device.notification.actionSheet);\n      }\n    }, {\n      namespace: 'pickDate',\n      os: ['dd'],\n      defaultParams: {\n        // 部分设备上设置标题后遮挡控件可不设置标题\n        title: '',\n        // 默认为空为使用当前时间\n        // 格式为 yyyy-MM-dd。\n        datetime: ''\n      },\n      runCode: function runCode() {\n        for (var _len8 = arguments.length, rest = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n          rest[_key8] = arguments[_key8];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          format: 'yyyy-MM-dd',\n          value: args[0].datetime\n        });\n\n        args[0].dataFilter = function (result) {\n          return {\n            date: result.value\n          };\n        };\n\n        callDDByArgs(args, dd.biz.util.datepicker);\n      }\n    }, {\n      namespace: 'pickTime',\n      os: ['dd'],\n      defaultParams: {\n        // 部分设备上设置标题后遮挡控件可不设置标题\n        title: '',\n        // 默认为空为使用当前时间\n        // 格式为 HH:mm\n        datetime: ''\n      },\n      runCode: function runCode() {\n        for (var _len9 = arguments.length, rest = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n          rest[_key9] = arguments[_key9];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          format: 'HH:mm',\n          value: args[0].datetime\n        });\n\n        args[0].dataFilter = function (result) {\n          return {\n            time: result.value\n          };\n        };\n\n        callDDByArgs(args, dd.biz.util.timepicker);\n      }\n    }, {\n      namespace: 'pickDateTime',\n      os: ['dd'],\n      defaultParams: {\n        title1: '',\n        title2: '',\n        // 默认为空为使用当前时间\n        // 格式为 yyyy-MM-dd HH:mm\n        datetime: ''\n      },\n      runCode: function runCode() {\n        for (var _len10 = arguments.length, rest = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n          rest[_key10] = arguments[_key10];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          format: 'yyyy-MM-dd HH:mm',\n          value: args[0].datetime\n        });\n\n        args[0].dataFilter = function (result) {\n          return {\n            datetime: result.value\n          };\n        };\n\n        callDDByArgs(args, dd.biz.util.datetimepicker);\n      }\n    }]);\n  }\n\n  function deviceMixin(hybrid) {\n    var hybridJs = hybrid;\n    hybridJs.extendModule('device', [{\n      namespace: 'getDeviceId',\n      os: ['dd'],\n      runCode: function runCode() {\n        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n\n        var args = rest;\n\n        args[0].dataFilter = function (result) {\n          return {\n            deviceId: result.uuid\n          };\n        };\n\n        callDDByArgs(args, dd.device.base.getUUID);\n      }\n    }, {\n      namespace: 'vibrate',\n      os: ['dd'],\n      defaultParams: {\n        duration: 500\n      },\n      runCode: function runCode() {\n        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          rest[_key2] = arguments[_key2];\n        }\n\n        callDDByArgs(rest, dd.device.notification.vibrate);\n      }\n    }, {\n      namespace: 'getNetWorkInfo',\n      os: ['dd'],\n      runCode: function runCode() {\n        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          rest[_key3] = arguments[_key3];\n        }\n\n        var args = rest;\n        var netTypeMap = {\n          wifi: 1,\n          '2g': 0,\n          '3g': 0,\n          '4g': 0,\n          unknown: -1,\n          none: -1\n        };\n\n        args[0].dataFilter = function (result) {\n          return {\n            // 保留原来状态\n            result: result.result,\n            netWorkType: netTypeMap[result.result]\n          };\n        };\n\n        callDDByArgs(args, dd.device.connection.getNetworkType);\n      }\n    }]);\n  }\n\n  function pageMixin(hybrid) {\n    var hybridJs = hybrid;\n    var innerUtil = hybridJs.innerUtil;\n    hybridJs.extendModule('page', [{\n      namespace: 'open',\n      os: ['dd'],\n      defaultParams: {\n        pageUrl: '',\n        pageStyle: 1,\n        // 横竖屏,默认为1表示竖屏\n        orientation: 1,\n        // 额外数据\n        data: {}\n      },\n      runCode: function runCode() {\n        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n\n        var args = rest;\n        var options = args[0]; // 将额外数据拼接到url中\n\n        options.url = innerUtil.getFullUrlByParams(options.pageUrl, options.data); // 去除无用参数的干扰\n\n        options.data = undefined;\n        args[0] = options;\n        callDDByArgs(args, dd.biz.util.openLink);\n      }\n    }, {\n      namespace: 'close',\n      os: ['dd'],\n      runCode: function runCode() {\n        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          rest[_key2] = arguments[_key2];\n        }\n\n        callDDByArgs(rest, dd.biz.navigation.close);\n      }\n    }]);\n  }\n\n  function navigatorMixin(hybrid) {\n    var hybridJs = hybrid;\n    var innerUtil = hybridJs.innerUtil;\n    hybridJs.extendModule('navigator', [{\n      namespace: 'setTitle',\n      os: ['dd'],\n      defaultParams: {\n        title: ''\n      },\n      runCode: function runCode() {\n        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        } // 兼容字符串形式\n\n\n        var args = innerUtil.compatibleStringParamsToObject.call(this, rest, 'title');\n        callDDByArgs(args, dd.biz.navigation.setTitle);\n      }\n    }, {\n      namespace: 'setRightBtn',\n      os: ['dd'],\n      defaultParams: {\n        text: '',\n        imageUrl: '',\n        isShow: 1\n      },\n      runCode: function runCode() {\n        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          rest[_key2] = arguments[_key2];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          control: true,\n          show: args[0].isShow\n        });\n        callDDByArgs(args, dd.biz.navigation.setRight);\n      }\n    }, {\n      namespace: 'setRightMenu',\n      os: ['dd'],\n      defaultParams: {\n        text: '',\n        imageUrl: '',\n        // 过滤色默认为空\n        iconFilterColor: '',\n        // 点击后出现的菜单列表，这个API会覆盖rightBtn\n        titleItems: [],\n        iconItems: [],\n        // 钉钉中的参数\n        backgroundColor: '#ADD8E6',\n        textColor: '#ADD8E611'\n      },\n      runCode: function runCode() {\n        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          rest[_key3] = arguments[_key3];\n        } // 兼容字符串形式\n\n\n        var args = rest;\n        var titleItems = args[0].titleItems;\n        var iconItems = args[0].iconItems;\n        var items = [];\n\n        for (var i = 0, len = titleItems.length; i < len; i += 1) {\n          items.push({\n            id: i + 1,\n            text: titleItems[i],\n            iconId: iconItems[i]\n          });\n        }\n\n        args[0] = innerUtil.extend(args[0], {\n          items: items\n        });\n        callDDByArgs(args, dd.biz.navigation.setMenu);\n      }\n    }]);\n  }\n\n  function runtimeMixin(hybrid) {\n    var hybridJs = hybrid;\n    var innerUtil = hybridJs.innerUtil;\n    hybridJs.extendModule('runtime', [{\n      namespace: 'launchApp',\n      os: ['dd'],\n      defaultParams: {\n        // android应用的包名\n        packageName: '',\n        // android应用页面类名\n        className: '',\n        // 页面配置的Scheme名字，适用于Android与iOS\n        scheme: ''\n      },\n      runCode: function runCode() {\n        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n\n        var args = rest;\n        args[0] = innerUtil.extend(args[0], {\n          app: hybridJs.os.android ? args[0].packageName : args[0].scheme,\n          activity: args[0].className\n        });\n        callDDByArgs(args, dd.device.launcher.launchApp);\n      }\n    }, {\n      namespace: 'clipboard',\n      os: ['dd'],\n      defaultParams: {\n        text: ''\n      },\n      runCode: function runCode() {\n        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          rest[_key2] = arguments[_key2];\n        }\n\n        callDDByArgs(rest, dd.biz.clipboardData.setData);\n      }\n    }, {\n      namespace: 'getGeolocation',\n      os: ['dd'],\n      defaultParams: {\n        isShowDetail: 0,\n        targetAccuracy: 1000,\n        coordinate: 1,\n        useCache: true,\n        withReGeocode: false\n      },\n      runCode: function runCode() {\n        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          rest[_key3] = arguments[_key3];\n        }\n\n        callDDByArgs(rest, dd.device.geolocation.get);\n      }\n    }]);\n  }\n\n  var hybridJs = window.ejs;\n  uiMixin(hybridJs);\n  deviceMixin(hybridJs);\n  pageMixin(hybridJs);\n  navigatorMixin(hybridJs);\n  runtimeMixin(hybridJs);\n});",null]}