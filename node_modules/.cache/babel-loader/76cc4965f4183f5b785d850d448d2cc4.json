{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/string.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/string.js","mtime":1588230106656},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n/*\n * @Author: guotq\n * @Date: 2019-07-30 17:52:39\n * @Last Modified by: guotq\n * @Last Modified time: 2019-07-30 17:52:39\n * @Description: 字符串操作相关， 例如邮箱验证， 身份证验证等\n */\nimport Util from '@utils';\nexport default {\n  /**\n   * 2019-06-13 14:05:46\n   * 验证是否是整数\n   * @param {String} v 要验证的数字\n   * @returns {Boolean} 是否是整数\n   */\n  isInt: function isInt(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    var isInteger = function isInteger(s) {\n      if (s < 0) {\n        s = -s;\n      }\n\n      var n = String(s);\n      return n.length > 0 && !/[^0-9]/.test(n);\n    };\n\n    return isInteger(v);\n  },\n\n  /**\n   * 2019-06-13 14:05:46\n   * 验证是否是数字\n   * @param {String} v 要验证的数字或字符串数字\n   * @returns {Boolean} 是否是数字或者字符串数字\n   */\n  isFloat: function isFloat(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    var n = String(v);\n\n    if (n.indexOf('-') !== -1 && n.indexOf('-') !== 0) {\n      return false;\n    }\n\n    n = n.replace('-', '');\n\n    if (n.split('.').length > 2) {\n      return false;\n    }\n\n    return n.length > 0 && !/[^0-9.]/.test(n) && !(n.charAt(n.length - 1) === '.');\n  },\n\n  /**\n   * 2019-06-13 14:05:46\n   * 验证是否是邮箱\n   * @param {String} v 要验证的邮箱\n   * @returns {Boolean} 是否是邮箱\n   */\n  isEmail: function isEmail(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    if (v.search(/^\\w+((-\\w+)|(\\.\\w+))*@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/) !== -1) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * 2019-06-13 14:05:46\n   * 验证是否是 url\n   * @param {String} v url\n   * @returns {Boolean} 是否是url\n   */\n  isUrl: function isUrl(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    var IsURL = function IsURL(strurl) {\n      strurl = strurl.toLowerCase().split('?')[0];\n      var strRegex = '^((https|http|ftp|rtsp|mms)?://)?' + '(([0-9]{1,3}.){3}[0-9]{1,3}' + '|' + \"([0-9a-z_!~*'()-]+.)*\" + '([0-9a-z][0-9a-z-]{0,61})?[0-9a-z].' + '[a-z]{2,6})' + '(:[0-9]{1,5})?' + '((/?)|' + \"(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$\";\n      var re = new RegExp(strRegex);\n\n      if (re.test(strurl)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    return IsURL(v);\n  },\n\n  /**\n   * 2019-06-13 14:06:59\n   * 手机号码格式验证\n   * @param {String} v 手机号码\n   * @returns {Boolean} 是否是手机号码\n   */\n  isMobile: function isMobile(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    return /^1[3456789]\\d{9}$/.test(v);\n  },\n\n  /**\n   * 2019-06-13 14:09:51\n   * 固定电话号码验证\n   * @param {String} v 固定电话号码\n   * @returns {Boolean} 是否是固定电话号码\n   */\n  isTel: function isTel(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    return /^0\\d{2,3}-?\\d{7,8}$/.test(v) || /^\\(0\\d{2,3}\\)\\d{7,8}$/.test(v);\n  },\n\n  /**\n   * 2019-06-13 14:15:29\n   * 电话号码格式验证\n   * @param {String} v 电话号码\n   * @returns {Boolean} 是否是电话号码\n   */\n  isPhone: function isPhone(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    return /^1[3456789]\\d{9}$/.test(v) || /^0\\d{2,3}-?\\d{7,8}$/.test(v) || /^\\(0\\d{2,3}\\)\\d{7,8}$/.test(v);\n  },\n\n  /**\n   * 2019-06-13 14:15:29\n   * 邮政编码格式验证\n   * @param {String} v 邮政编码\n   * @returns {Boolean} 是否是邮政编码\n   */\n  isPostCode: function isPostCode(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    return /^\\d{6}$/.test(v);\n  },\n\n  /**\n   * 2019-06-13 14:15:29\n   * 组织机构代码\n   * @param {String} v 组织机构代码\n   * @returns {Boolean} 是否是组织机构代码\n   */\n  isOrgCode: function isOrgCode(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    } // 组织机构代码\n\n\n    if (/^[A-Z0-9]{8}-[A-Z0-9]$/.test(v)) {\n      return true;\n    } // 统一社会信用代码\n\n\n    var reg = /^([0-9A-Z]{2})([0-9]{6})([0-9A-Z]{10})$/;\n\n    if (!reg.test(v)) {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * 身份证验证\n   * @param {String} v 身份证\n   * @returns {Boolean} 是否是身份证\n   */\n  isIdCard: function isIdCard(v) {\n    if (Util.isNull(v) || v === '') {\n      return true;\n    }\n\n    function validateIdCard(idCard) {\n      // 15位和18位身份证号码的正则表达式\n      var regIdCard = /^(^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$)|(^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d{4})|\\d{3}[Xx])$)$/; // 如果通过该验证，说明身份证格式正确，但准确性还需计算\n\n      if (regIdCard.test(idCard)) {\n        if (idCard.length === 18) {\n          var idCardWi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2]; // 将前17位加权因子保存在数组里\n\n          var idCardY = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2]; // 这是除以11后，可能产生的11位余数、验证码，也保存成数组\n\n          var idCardWiSum = 0; // 用来保存前17位各自乖以加权因子后的总和\n\n          for (var i = 0; i < 17; i++) {\n            idCardWiSum += idCard.substring(i, i + 1) * idCardWi[i];\n          }\n\n          var idCardMod = idCardWiSum % 11; // 计算出校验码所在数组的位置\n\n          var idCardLast = idCard.substring(17); // 得到最后一位身份证号码\n          // 如果等于2，则说明校验码是10，身份证号码最后一位应该是X\n\n          if (idCardMod === 2) {\n            if (idCardLast === 'X' || idCardLast === 'x') {\n              return true;\n            } else {\n              return false;\n            }\n          } else {\n            // 用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码\n            if (idCardLast === parseInt(idCardY[idCardMod], 10)) {\n              return true;\n            } else {\n              return false;\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n    }\n\n    return validateIdCard(v);\n  },\n\n  /**\n   * 过滤非法字符，过滤特殊字符与转义字符\n   * @param {string} str 需要过滤的字符串\n   * @param {RegExp} reg 正值式\n   * @return {String} 返回过滤后的结果\n   */\n  excludeSpecial: function excludeSpecial(str, reg) {\n    if (!str) {\n      return str;\n    }\n\n    reg = reg || /[/\\b\\f\\n\\r\\t`~!@#$^&%*()=|{}+《》':;',[\\].<>?~！@#￥……&*（）——【】‘’；：”“'。，、？]/g;\n    str = str.replace(reg, '');\n    return str;\n  }\n};",null]}