{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/math.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/math.js","mtime":1588230106651},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["/*\n * @Author: guotq\n * @Date: 2019-04-02 17:04:21\n * @Last Modified by: guotq\n * @Last Modified time: 2019-04-03 09:02:16\n * @Description: 对浮点数、或者整数的加减乘除\n */\n\n/**\n * mathTools 包含加减乘除四个方法，能确保浮点数运算不丢失精度\n *\n * 我们知道计算机编程语言里浮点数计算会存在精度丢失问题（或称舍入误差），其根本原因是二进制和实现位数限制有些数无法有限表示\n * 以下是十进制小数对应的二进制表示\n *      0.1 >> 0.0001 1001 1001 1001…（1001无限循环）\n *      0.2 >> 0.0011 0011 0011 0011…（0011无限循环）\n * 计算机里每种数据类型的存储是一个有限宽度，比如 JavaScript 使用 64 位存储数字类型，因此超出的会舍去。舍去的部分就是精度丢失的部分。\n *\n * ** method **\n *  add / subtract / multiply / divide\n *\n * ** explame **\n *  0.1 + 0.2 == 0.30000000000000004 （多了 0.00000000000004）\n *  0.2 + 0.4 == 0.6000000000000001  （多了 0.0000000000001）\n *  19.9 * 100 == 1989.9999999999998 （少了 0.0000000000002）\n *\n * mathTools.add(0.1, 0.2) >> 0.3\n * mathTools.multiply(19.9, 100) >> 1990\n *\n */\nvar innerUtil = {\n  /**\n   * 判断一个数是否为一个整数\n   * @param {Number} num 要验证的数字\n   * @return {boolean} true or false\n   */\n  isInteger: function isInteger(num) {\n    return Math.floor(num) === num;\n  },\n\n  /**\n   * 将一个浮点数转成整数，返回整数和倍数。如 3.14 >> 314，倍数是 100\n   * @param {Number} floatNum 小数\n   * @return {Object} 返回数据结果\n   */\n  toInteger: function toInteger(floatNum) {\n    var self = this;\n    var result = {\n      times: 1,\n      num: 0\n    };\n\n    if (self.isInteger(floatNum)) {\n      result.num = floatNum;\n      return result;\n    }\n\n    var str = \"\".concat(floatNum);\n    var dotIndex = str.indexOf('.');\n    var len = str.substring(dotIndex + 1).length;\n    var times = Math.pow(10, len);\n    var intNum = parseInt(floatNum * times + 0.5, 10);\n    result.times = times;\n    result.num = intNum;\n    return result;\n  },\n\n  /**\n   * 核心方法，实现加减乘除运算，确保不丢失精度\n   * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）\n   *\n   * @param {Number} num1 运算数1\n   * @param {Number} num2 运算数2\n   * @param {String} op 运算类型，有加减乘除（add/subtract/multiply/divide）\n   * @returns {Number} 运算结果\n   */\n  operation: function operation(num1, num2, op) {\n    var self = this;\n    var o1 = self.toInteger(num1);\n    var o2 = self.toInteger(num2);\n    var n1 = o1.num;\n    var n2 = o2.num;\n    var t1 = o1.times;\n    var t2 = o2.times;\n    var max = t1 > t2 ? t1 : t2;\n    var result = null;\n\n    switch (op) {\n      case 'add':\n        if (t1 === t2) {\n          // 两个小数位数相同\n          result = n1 + n2;\n        } else if (t1 > t2) {\n          // o1 小数位 大于 o2\n          result = n1 + n2 * (t1 / t2);\n        } else {\n          // o1 小数位 小于 o2\n          result = n1 * (t2 / t1) + n2;\n        }\n\n        return result / max;\n\n      case 'subtract':\n        if (t1 === t2) {\n          result = n1 - n2;\n        } else if (t1 > t2) {\n          result = n1 - n2 * (t1 / t2);\n        } else {\n          result = n1 * (t2 / t1) - n2;\n        }\n\n        return result / max;\n\n      case 'multiply':\n        result = n1 * n2 / (t1 * t2);\n        return result;\n\n      case 'divide':\n        var r1 = n1 / n2;\n        var r2 = t2 / t1;\n        return self.operation(r1, r2, 'multiply');\n\n      default:\n    }\n  }\n};\nexport default {\n  /**\n   * add two numbers\n   * @param {Number} num1 The first number\n   * @param {Number} num2 The second number\n   * @return {Number} The sum of the two numbers.\n   */\n  add: function add(num1, num2) {\n    return innerUtil.operation(num1, num2, 'add');\n  },\n\n  /**\n   * subtract two numbers\n   * @param {Number} num1 The first number\n   * @param {Number} num2 The second number\n   * @return {Number} The subtract of the two numbers.\n   */\n  subtract: function subtract(num1, num2) {\n    return innerUtil.operation(num1, num2, 'subtract');\n  },\n\n  /**\n   * multiply two numbers\n   * @param {Number} num1 The first number\n   * @param {Number} num2 The second number\n   * @return {Number} The multiply of the two numbers.\n   */\n  multiply: function multiply(num1, num2) {\n    return innerUtil.operation(num1, num2, 'multiply');\n  },\n\n  /**\n   * divide two numbers\n   * @param {Number} num1 The first number\n   * @param {Number} num2 The second number\n   * @return {Number} The divide of the two numbers.\n   */\n  divide: function divide(num1, num2) {\n    return innerUtil.operation(num1, num2, 'divide');\n  }\n};",null]}