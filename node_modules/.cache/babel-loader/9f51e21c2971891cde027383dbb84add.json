{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/base64.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/base64.js","mtime":1588230106647},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\n\n/*\n * @Author: guotq\n * @Date: 2019-04-02 17:04:21\n * @Last Modified by: guotq\n * @Last Modified time: 2019-04-03 09:02:16\n * @Description: 关于 base64 的一些操作\n * 比如 base64 转换为 blob 对象\n * 或者 blob 对象转换成 base64\n * 去除 base64 url 部分\n * 获取 base64 url 部分\n * 获取 base64 的 mime 类型\n */\nexport default {\n  /**\n   * base64 转换成 blob 对象\n   * @param {String} b64 base64值\n   * @returns {Object} blob对象\n   */\n  base64ToBlob: function base64ToBlob(b64) {\n    var arr = b64.split(','); // 解码 b64 并且转换成 btype\n\n    var btypes = window.atob(arr[1]);\n    var mime = this.getMime(arr[0]); // 处理异常，将 ascii 码小于 0 的转换为大于 0 的\n\n    var ab = new ArrayBuffer(btypes.length); // 生成识图（直接针对内存）：8位无符号整数，长度1个字节\n\n    var ia = new Uint8Array(ab);\n\n    for (var i = 0, len = btypes.length; i < len; i++) {\n      ia[i] = btypes.charCodeAt(i);\n    }\n\n    return new Blob([ab], {\n      type: mime\n    });\n  },\n\n  /*\n   * blob 转换成 base64 对象\n   * @param {object} blob 文件对象\n   * @param {Function} callback 回调函数\n   * returns {String} 该文件的base64值\n   */\n  blobToBase64: function blobToBase64(blob, callback) {\n    var fileReader = new FileReader();\n    var that = this;\n    fileReader.readAsDataURL(blob);\n\n    fileReader.onload = function (e) {\n      callback && callback.call(that, e.target.result);\n    };\n  },\n\n  /**\n   * 获取 base64 的类型\n   * @param {String} b64 base64值\n   * @returns {String} mime 类型\n   */\n  getMime: function getMime(b64) {\n    return b64.match(/:(.*);/)[1];\n  },\n\n  /**\n   * 获取 base64 的 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 的 url 部分\n   */\n  getBase64Url: function getBase64Url(b64) {\n    return b64.match(/(.*),/)[1];\n  },\n\n  /**\n   * 获取 base64 去除 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 去除 url 后的值\n   */\n  getBase64NotUrl: function getBase64NotUrl(b64) {\n    return b64.replace(/^data.*,/, '');\n  }\n};",{"version":3,"sources":["/Users/gujiahao/Documents/work/github/artweb/src/utils/base64.js"],"names":["base64ToBlob","b64","arr","split","btypes","window","atob","mime","getMime","ab","ArrayBuffer","length","ia","Uint8Array","i","len","charCodeAt","Blob","type","blobToBase64","blob","callback","fileReader","FileReader","that","readAsDataURL","onload","e","call","target","result","match","getBase64Url","getBase64NotUrl","replace"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAaA,eAAe;AACb;;;;;AAKAA,EAAAA,YANa,wBAMCC,GAND,EAMM;AACjB,QAAMC,GAAG,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAZ,CADiB,CAGjB;;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAAC,CAAD,CAAf,CAAf;AACA,QAAMK,IAAI,GAAG,KAAKC,OAAL,CAAaN,GAAG,CAAC,CAAD,CAAhB,CAAb,CALiB,CAOjB;;AACA,QAAMO,EAAE,GAAG,IAAIC,WAAJ,CAAgBN,MAAM,CAACO,MAAvB,CAAX,CARiB,CASjB;;AACA,QAAMC,EAAE,GAAG,IAAIC,UAAJ,CAAeJ,EAAf,CAAX;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGX,MAAM,CAACO,MAA7B,EAAqCG,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDF,MAAAA,EAAE,CAACE,CAAD,CAAF,GAAQV,MAAM,CAACY,UAAP,CAAkBF,CAAlB,CAAR;AACD;;AAED,WAAO,IAAIG,IAAJ,CAAS,CAACR,EAAD,CAAT,EAAe;AACpBS,MAAAA,IAAI,EAAEX;AADc,KAAf,CAAP;AAGD,GAzBY;;AA0Bb;;;;;;AAMAY,EAAAA,YAhCa,wBAgCCC,IAhCD,EAgCOC,QAhCP,EAgCiB;AAC5B,QAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;AACA,QAAMC,IAAI,GAAG,IAAb;AAEAF,IAAAA,UAAU,CAACG,aAAX,CAAyBL,IAAzB;;AACAE,IAAAA,UAAU,CAACI,MAAX,GAAoB,UAAUC,CAAV,EAAa;AAC/BN,MAAAA,QAAQ,IAAIA,QAAQ,CAACO,IAAT,CAAcJ,IAAd,EAAoBG,CAAC,CAACE,MAAF,CAASC,MAA7B,CAAZ;AACD,KAFD;AAGD,GAxCY;;AAyCb;;;;;AAKAtB,EAAAA,OA9Ca,mBA8CJP,GA9CI,EA8CC;AACZ,WAAOA,GAAG,CAAC8B,KAAJ,CAAU,QAAV,EAAoB,CAApB,CAAP;AACD,GAhDY;;AAiDb;;;;;AAKAC,EAAAA,YAtDa,wBAsDC/B,GAtDD,EAsDM;AACjB,WAAOA,GAAG,CAAC8B,KAAJ,CAAU,OAAV,EAAmB,CAAnB,CAAP;AACD,GAxDY;;AAyDb;;;;;AAKAE,EAAAA,eA9Da,2BA8DIhC,GA9DJ,EA8DS;AACpB,WAAOA,GAAG,CAACiC,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAP;AACD;AAhEY,CAAf","sourcesContent":["/*\n * @Author: guotq\n * @Date: 2019-04-02 17:04:21\n * @Last Modified by: guotq\n * @Last Modified time: 2019-04-03 09:02:16\n * @Description: 关于 base64 的一些操作\n * 比如 base64 转换为 blob 对象\n * 或者 blob 对象转换成 base64\n * 去除 base64 url 部分\n * 获取 base64 url 部分\n * 获取 base64 的 mime 类型\n */\n\nexport default {\n  /**\n   * base64 转换成 blob 对象\n   * @param {String} b64 base64值\n   * @returns {Object} blob对象\n   */\n  base64ToBlob (b64) {\n    const arr = b64.split(',');\n\n    // 解码 b64 并且转换成 btype\n    const btypes = window.atob(arr[1]);\n    const mime = this.getMime(arr[0]);\n\n    // 处理异常，将 ascii 码小于 0 的转换为大于 0 的\n    const ab = new ArrayBuffer(btypes.length);\n    // 生成识图（直接针对内存）：8位无符号整数，长度1个字节\n    const ia = new Uint8Array(ab);\n\n    for (let i = 0, len = btypes.length; i < len; i++) {\n      ia[i] = btypes.charCodeAt(i);\n    }\n\n    return new Blob([ab], {\n      type: mime\n    });\n  },\n  /*\n   * blob 转换成 base64 对象\n   * @param {object} blob 文件对象\n   * @param {Function} callback 回调函数\n   * returns {String} 该文件的base64值\n   */\n  blobToBase64 (blob, callback) {\n    const fileReader = new FileReader();\n    const that = this;\n\n    fileReader.readAsDataURL(blob);\n    fileReader.onload = function (e) {\n      callback && callback.call(that, e.target.result);\n    };\n  },\n  /**\n   * 获取 base64 的类型\n   * @param {String} b64 base64值\n   * @returns {String} mime 类型\n   */\n  getMime (b64) {\n    return b64.match(/:(.*);/)[1];\n  },\n  /**\n   * 获取 base64 的 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 的 url 部分\n   */\n  getBase64Url (b64) {\n    return b64.match(/(.*),/)[1];\n  },\n  /**\n   * 获取 base64 去除 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 去除 url 后的值\n   */\n  getBase64NotUrl (b64) {\n    return b64.replace(/^data.*,/, '');\n  }\n};\n"]}]}