{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/imagescale.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/imagescale.js","mtime":1588230106650},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\n\n/**\n * 缩放算法\n * 最临邻近插值\n */\nfunction scale(data, width, height, newData, newWidth, newHeight) {\n  // 计算压缩后的缩放比\n  var scaleW = newWidth / width;\n  var scaleH = newHeight / height;\n  var dstData = newData;\n\n  var filter = function filter(dstCol, dstRow) {\n    var srcCol = Math.min(width - 1, dstCol / scaleW);\n    var srcRow = Math.min(height - 1, dstRow / scaleH);\n    var intCol = Math.floor(srcCol);\n    var intRow = Math.floor(srcRow); // 真实的index，因为数组是一维的\n\n    var dstI = dstRow * newWidth + dstCol;\n    var srcI = intRow * width + intCol; // rgba，所以要乘以4\n\n    dstI *= 4;\n    srcI *= 4;\n\n    for (var j = 0; j <= 3; j += 1) {\n      dstData[dstI + j] = data[srcI + j];\n    }\n  }; // 区块\n\n\n  for (var col = 0; col < newWidth; col += 1) {\n    for (var row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction nearestNeighborInterpolation(imgData, newImgData) {\n  scale(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n  return newImgData;\n}\n/**\n * 缩放算法\n * 双线性差值，会损坏原图（带低通滤波器效果）\n */\n\n/**\n * 获取某行某列的像素对于的rgba值\n * @param {Object} data 图像数据\n * @param {Number} srcWidth 宽度\n * @param {Number} srcHeight 高度\n * @param {Number} row 目标像素的行\n * @param {Number} col 目标像素的列\n * @returns {String} rgba 颜色值\n */\n\n\nfunction getRGBAValue(data, srcWidth, srcHeight, row, col) {\n  var newRow = row;\n  var newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  var newIndex = newRow * srcWidth + newCol;\n  newIndex *= 4;\n  return [data[newIndex + 0], data[newIndex + 1], data[newIndex + 2], data[newIndex + 3]];\n}\n\nfunction scale$1(data, width, height, newData, newWidth, newHeight) {\n  // 计算压缩后的缩放比\n  var scaleW = newWidth / width;\n  var scaleH = newHeight / height;\n  var dstData = newData;\n\n  var filter = function filter(dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    var srcCol = Math.min(width - 1, dstCol / scaleW);\n    var srcRow = Math.min(height - 1, dstRow / scaleH);\n    var intCol = Math.floor(srcCol);\n    var intRow = Math.floor(srcRow); // 计算u和v\n\n    var u = srcCol - intCol;\n    var v = srcRow - intRow; // 1-u与1-v\n\n    var u1 = 1 - u;\n    var v1 = 1 - v; // 真实的index，因为数组是一维的\n\n    var dstI = dstRow * newWidth + dstCol; // rgba，所以要乘以4\n\n    dstI *= 4;\n    var rgba00 = getRGBAValue(data, width, height, intRow + 0, intCol + 0);\n    var rgba01 = getRGBAValue(data, width, height, intRow + 0, intCol + 1);\n    var rgba10 = getRGBAValue(data, width, height, intRow + 1, intCol + 0);\n    var rgba11 = getRGBAValue(data, width, height, intRow + 1, intCol + 1);\n\n    for (var j = 0; j <= 3; j += 1) {\n      var partV = v * (u1 * rgba10[j] + u * rgba11[j]);\n      var partV1 = v1 * (u1 * rgba00[j] + u * rgba01[j]);\n      dstData[dstI + j] = partV + partV1;\n    }\n  };\n\n  for (var col = 0; col < newWidth; col += 1) {\n    for (var row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bilinearInterpolation(imgData, newImgData) {\n  scale$1(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n  return newImgData;\n}\n/**\n * 缩放算法\n * 双立方（三次）卷积插值，图像更真实\n * 计算周围16个点\n * 取一阶导数值为二阶差分值的情况，满足插值函数一阶导函数连续\n * 函数逼近程度和三次样条插值效果一样，非常的高\n *\n * 公式：（矩阵乘法）\n * 推导公式\n * http://blog.csdn.net/qq_24451605/article/details/49474113\n * https://en.wikipedia.org/wiki/Bicubic_interpolation\n * */\n\n\nvar a00 = '';\nvar a01 = '';\nvar a02 = '';\nvar a03 = '';\nvar a10 = '';\nvar a11 = '';\nvar a12 = '';\nvar a13 = '';\nvar a20 = '';\nvar a21 = '';\nvar a22 = '';\nvar a23 = '';\nvar a30 = '';\nvar a31 = '';\nvar a32 = '';\nvar a33 = '';\n\nvar getRGBAValue$1 = function getRGBAValue(data, srcWidth, srcHeight, row, col, colorIndex) {\n  var newRow = row;\n  var newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  var newIndex = newRow * srcWidth + newCol;\n  newIndex *= 4;\n  return data[newIndex + colorIndex];\n};\n\nvar getPixelValue = function getPixelValue(pixelValue) {\n  var newPixelValue = pixelValue;\n  newPixelValue = Math.min(255, newPixelValue);\n  newPixelValue = Math.max(0, newPixelValue);\n  return newPixelValue;\n};\n\nvar updateCoefficients = function updateCoefficients(tmpPixels) {\n  var p = tmpPixels;\n  a00 = p[1][1];\n  a01 = -0.5 * p[1][0] + 0.5 * p[1][2];\n  a02 = p[1][0] - 2.5 * p[1][1] + 2 * p[1][2] - 0.5 * p[1][3];\n  a03 = -0.5 * p[1][0] + 1.5 * p[1][1] - 1.5 * p[1][2] + 0.5 * p[1][3];\n  a10 = -0.5 * p[0][1] + 0.5 * p[2][1];\n  a11 = 0.25 * p[0][0] - 0.25 * p[0][2] - 0.25 * p[2][0] + 0.25 * p[2][2];\n  a12 = -0.5 * p[0][0] + 1.25 * p[0][1] - p[0][2] + 0.25 * p[0][3] + 0.5 * p[2][0] - 1.25 * p[2][1] + p[2][2] - 0.25 * p[2][3];\n  a13 = 0.25 * p[0][0] - 0.75 * p[0][1] + 0.75 * p[0][2] - 0.25 * p[0][3] - 0.25 * p[2][0] + 0.75 * p[2][1] - 0.75 * p[2][2] + 0.25 * p[2][3];\n  a20 = p[0][1] - 2.5 * p[1][1] + 2 * p[2][1] - 0.5 * p[3][1];\n  a21 = -0.5 * p[0][0] + 0.5 * p[0][2] + 1.25 * p[1][0] - 1.25 * p[1][2] - p[2][0] + p[2][2] + 0.25 * p[3][0] - 0.25 * p[3][2];\n  a22 = p[0][0] - 2.5 * p[0][1] + 2 * p[0][2] - 0.5 * p[0][3] - 2.5 * p[1][0] + 6.25 * p[1][1] - 5 * p[1][2] + 1.25 * p[1][3] + 2 * p[2][0] - 5 * p[2][1] + 4 * p[2][2] - p[2][3] - 0.5 * p[3][0] + 1.25 * p[3][1] - p[3][2] + 0.25 * p[3][3];\n  a23 = -0.5 * p[0][0] + 1.5 * p[0][1] - 1.5 * p[0][2] + 0.5 * p[0][3] + 1.25 * p[1][0] - 3.75 * p[1][1] + 3.75 * p[1][2] - 1.25 * p[1][3] - p[2][0] + 3 * p[2][1] - 3 * p[2][2] + p[2][3] + 0.25 * p[3][0] - 0.75 * p[3][1] + 0.75 * p[3][2] - 0.25 * p[3][3];\n  a30 = -0.5 * p[0][1] + 1.5 * p[1][1] - 1.5 * p[2][1] + 0.5 * p[3][1];\n  a31 = 0.25 * p[0][0] - 0.25 * p[0][2] - 0.75 * p[1][0] + 0.75 * p[1][2] + 0.75 * p[2][0] - 0.75 * p[2][2] - 0.25 * p[3][0] + 0.25 * p[3][2];\n  a32 = -0.5 * p[0][0] + 1.25 * p[0][1] - p[0][2] + 0.25 * p[0][3] + 1.5 * p[1][0] - 3.75 * p[1][1] + 3 * p[1][2] - 0.75 * p[1][3] - 1.5 * p[2][0] + 3.75 * p[2][1] - 3 * p[2][2] + 0.75 * p[2][3] + 0.5 * p[3][0] - 1.25 * p[3][1] + p[3][2] - 0.25 * p[3][3];\n  a33 = 0.25 * p[0][0] - 0.75 * p[0][1] + 0.75 * p[0][2] - 0.25 * p[0][3] - 0.75 * p[1][0] + 2.25 * p[1][1] - 2.25 * p[1][2] + 0.75 * p[1][3] + 0.75 * p[2][0] - 2.25 * p[2][1] + 2.25 * p[2][2] - 0.75 * p[2][3] - 0.25 * p[3][0] + 0.75 * p[3][1] - 0.75 * p[3][2] + 0.25 * p[3][3];\n};\n\nvar getValue = function getValue(x, y) {\n  var x2 = x * x;\n  var x3 = x2 * x;\n  var y2 = y * y;\n  var y3 = y2 * y;\n  return a00 + a01 * y + a02 * y2 + a03 * y3 + (a10 + a11 * y + a12 * y2 + a13 * y3) * x + (a20 + a21 * y + a22 * y2 + a23 * y3) * x2 + (a30 + a31 * y + a32 * y2 + a33 * y3) * x3;\n};\n\nfunction scale$2(data, width, height, newData, newWidth, newHeight) {\n  var dstData = newData; // 计算压缩后的缩放比\n\n  var scaleW = newWidth / width;\n  var scaleH = newHeight / height;\n\n  var filter = function filter(dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    var srcCol = Math.min(width - 1, dstCol / scaleW);\n    var srcRow = Math.min(height - 1, dstRow / scaleH);\n    var intCol = Math.floor(srcCol);\n    var intRow = Math.floor(srcRow); // 计算u和v\n\n    var u = srcCol - intCol;\n    var v = srcRow - intRow; // 真实的index，因为数组是一维的\n\n    var dstI = dstRow * newWidth + dstCol;\n    dstI *= 4; // 16个邻近像素的灰度（分别计算成rgba）\n\n    var tmpPixels = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]; // rgba\n\n    for (var i = 0; i <= 3; i += 1) {\n      // 16个临近点\n      for (var m = -1; m <= 2; m += 1) {\n        for (var n = -1; n <= 2; n += 1) {\n          tmpPixels[m + 1][n + 1] = getRGBAValue$1(data, width, height, intRow + m, intCol + n, i);\n        }\n      } // 更新系数\n\n\n      updateCoefficients(tmpPixels); // 利用uv来求值\n\n      dstData[dstI + i] = getPixelValue(getValue(v, u));\n    }\n  }; // 区块\n\n\n  for (var col = 0; col < newWidth; col += 1) {\n    for (var row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bicubicInterpolation(imgData, newImgData) {\n  scale$2(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n  return newImgData;\n}\n/**\n * 缩放算法\n * 双立方（三次）卷积插值，图像更真实\n * 计算周围16个点\n * 取一阶导数值为二阶差分值的情况，满足插值函数一阶导函数连续\n * 函数逼近程度和三次样条插值效果一样，非常的高\n *\n * 公式：（矩阵乘法）\n * 推导公式\n * http://blog.csdn.net/qq_24451605/article/details/49474113\n * https://en.wikipedia.org/wiki/Bicubic_interpolation\n * */\n\n/**\n * 采样公式的常数A取值,调整锐化与模糊\n * -0.5 三次Hermite样条\n * -0.75 常用值之一\n * -1 逼近y = sin(x*PI)/(x*PI)\n * -2 常用值之一\n */\n\n\nvar A = -1;\n\nfunction interpolationCalculate(x) {\n  var absX = x >= 0 ? x : -x;\n  var x2 = x * x;\n  var x3 = absX * x2;\n\n  if (absX <= 1) {\n    return 1 - (A + 3) * x2 + (A + 2) * x3;\n  }\n\n  if (absX <= 2) {\n    return -4 * A + 8 * A * absX - 5 * A * x2 + A * x3;\n  }\n\n  return 0;\n}\n\nfunction getPixelValue$1(pixelValue) {\n  var newPixelValue = pixelValue;\n  newPixelValue = Math.min(255, newPixelValue);\n  newPixelValue = Math.max(0, newPixelValue);\n  return newPixelValue;\n}\n/**\n * 获取某行某列的像素对于的rgba值\n * @param {Object} data 图像数据\n * @param {Number} srcWidth 宽度\n * @param {Number} srcHeight 高度\n * @param {Number} row 目标像素的行\n * @param {Number} col 目标像素的列\n * @returns {String} rgba值\n */\n\n\nfunction getRGBAValue$2(data, srcWidth, srcHeight, row, col) {\n  var newRow = row;\n  var newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  var newIndex = newRow * srcWidth + newCol;\n  newIndex *= 4;\n  return [data[newIndex + 0], data[newIndex + 1], data[newIndex + 2], data[newIndex + 3]];\n}\n\nfunction scale$3(data, width, height, newData, newWidth, newHeight) {\n  var dstData = newData; // 计算压缩后的缩放比\n\n  var scaleW = newWidth / width;\n  var scaleH = newHeight / height;\n\n  var filter = function filter(dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    var srcCol = Math.min(width - 1, dstCol / scaleW);\n    var srcRow = Math.min(height - 1, dstRow / scaleH);\n    var intCol = Math.floor(srcCol);\n    var intRow = Math.floor(srcRow); // 计算u和v\n\n    var u = srcCol - intCol;\n    var v = srcRow - intRow; // 真实的index，因为数组是一维的\n\n    var dstI = dstRow * newWidth + dstCol;\n    dstI *= 4; // 存储灰度值的权重卷积和\n\n    var rgbaData = [0, 0, 0, 0]; // 根据数学推导，16个点的f1*f2加起来是趋近于1的（可能会有浮点误差）\n    // 因此就不再单独先加权值，再除了\n    // 16个邻近点\n\n    for (var m = -1; m <= 2; m += 1) {\n      for (var n = -1; n <= 2; n += 1) {\n        var rgba = getRGBAValue$2(data, width, height, intRow + m, intCol + n); // 一定要正确区分 m,n和u,v对应的关系，否则会造成图像严重偏差（譬如出现噪点等）\n        // F(row + m, col + n)S(m - v)S(n - u)\n\n        var f1 = interpolationCalculate(m - v);\n        var f2 = interpolationCalculate(n - u);\n        var weight = f1 * f2;\n        rgbaData[0] += rgba[0] * weight;\n        rgbaData[1] += rgba[1] * weight;\n        rgbaData[2] += rgba[2] * weight;\n        rgbaData[3] += rgba[3] * weight;\n      }\n    }\n\n    dstData[dstI + 0] = getPixelValue$1(rgbaData[0]);\n    dstData[dstI + 1] = getPixelValue$1(rgbaData[1]);\n    dstData[dstI + 2] = getPixelValue$1(rgbaData[2]);\n    dstData[dstI + 3] = getPixelValue$1(rgbaData[3]);\n  }; // 区块\n\n\n  for (var col = 0; col < newWidth; col += 1) {\n    for (var row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bicubicInterpolation$1(imgData, newImgData) {\n  scale$3(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n  return newImgData;\n}\n\nfunction extend(target) {\n  var finalTarget = target;\n\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  rest.forEach(function (source) {\n    source && Object.keys(source).forEach(function (key) {\n      finalTarget[key] = source[key];\n    });\n  });\n  return finalTarget;\n}\n/**\n * 选择这段代码用到的太多了，因此抽取封装出来\n * @param {Object} element dom元素或者selector\n * @return {HTMLElement} 返回选择的Dom对象，无果没有符合要求的，则返回null\n */\n\n/**\n * 获取DOM的可视区高度，兼容PC上的body高度获取\n * 因为在通过body获取时，在PC上会有CSS1Compat形式，所以需要兼容\n * @param {HTMLElement} dom 需要获取可视区高度的dom,对body对象有特殊的兼容方案\n * @return {Number} 返回最终的高度\n */\n\n/**\n * 设置一个Util对象下的命名空间\n * @param {Object} parent 需要绑定到哪一个对象上\n * @param {String} namespace 需要绑定的命名空间名\n * @param {Object} target 需要绑定的目标对象\n * @return {Object} 返回最终的对象\n */\n\n\nvar defaultArgs = {\n  width: 80,\n  height: 80,\n  mime: 'image/png',\n  // 0: nearestNeighbor\n  // 1: bilinearInterpolation\n  // 2: bicubicInterpolation\n  // 3: bicubicInterpolation2\n  processType: 1\n};\nvar defaultArgsCompress = {\n  // 压缩质量\n  quality: 0.92,\n  mime: 'image/jpeg',\n  // 压缩时的放大系数，默认为1，如果增大，代表图像的尺寸会变大(最大不会超过原图)\n  compressScaleRatio: 1,\n  // ios的iPhone下主动放大一定系数以解决分辨率过小的模糊问题\n  iphoneFixedRatio: 1.5,\n  // 是否采用原图像素（不会改变大小）\n  isUseOriginSize: false,\n  // 增加最大宽度，增加后最大不会超过这个宽度\n  maxWidth: 0,\n  // 使用强制的宽度，如果使用，其它宽高比系数都会失效，默认整图使用这个宽度\n  forceWidth: 0,\n  // 同上，但是一般不建议设置，因为很可能会改变宽高比导致拉升，特殊场景下使用\n  forceHeight: 0\n};\n\nfunction scaleMixin(ImageScale) {\n  var api = ImageScale;\n  /**\n   * 对ImageData类型的数据进行缩放，将数据放入新的imageData中\n   * @param {ImageData} imageData 目标ImageData\n   * @param {ImageData} newImageData 新的ImageData\n   * @param {Object} args 额外参数\n   */\n\n  api.scaleImageData = function scaleImageData(imageData, newImageData, args) {\n    var finalArgs = extend({}, defaultArgs, args);\n    var processTypes = [nearestNeighborInterpolation, bilinearInterpolation, bicubicInterpolation, bicubicInterpolation$1];\n    var curDealFunc = processTypes[finalArgs.processType];\n    curDealFunc(imageData, newImageData);\n  };\n  /**\n   * 对Image类型的对象进行缩放，返回一个base64字符串\n   * @param {Image} image 目标Image\n   * @param {Object} args 额外参数\n   * @return {String} 返回目标图片的b64字符串\n   */\n\n\n  api.scaleImage = function scaleImage(image, args) {\n    var width = image.width;\n    var height = image.height;\n    var finalArgs = extend({}, defaultArgs, args);\n    var canvasTransfer = document.createElement('canvas');\n    var ctxTransfer = canvasTransfer.getContext('2d');\n    canvasTransfer.width = width;\n    canvasTransfer.height = height;\n    ctxTransfer.drawImage(image, 0, 0, width, height);\n    var imageData = ctxTransfer.getImageData(0, 0, width, height);\n    var newImageData = ctxTransfer.createImageData(finalArgs.width, finalArgs.height);\n    api.scaleImageData(imageData, newImageData, finalArgs);\n    canvasTransfer.width = newImageData.width;\n    canvasTransfer.height = newImageData.height;\n    ctxTransfer.putImageData(newImageData, 0, 0, 0, 0, canvasTransfer.width, canvasTransfer.height); // console.log(imageData);\n    // console.log(newImageData);\n    // console.log('压缩时w:' + canvasTransfer.width + ',' + canvasTransfer.height);\n\n    return canvasTransfer.toDataURL(finalArgs.mime, 0.9);\n  };\n\n  function getPixelRatio(context) {\n    var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n    var ratio = (window.devicePixelRatio || 1) / backingStore;\n    return ratio;\n  }\n  /**\n   * 压缩图片，返回一个base64字符串\n   * 与scale的区别是这用的是canvas默认缩放，并且有很多参数可控\n   * @param {Image} image 目标Image\n   * @param {Object} args 额外参数\n   * @return {String} 返回目标图片的b64字符串\n   */\n\n\n  api.compressImage = function compressImage(image, args) {\n    var width = image.width;\n    var height = image.height;\n    var wPerH = width / height;\n    var finalArgs = extend({}, defaultArgsCompress, args);\n    var canvasTransfer = document.createElement('canvas');\n    var ctxTransfer = canvasTransfer.getContext('2d');\n    var ratio = getPixelRatio(ctxTransfer);\n    ratio *= finalArgs.compressScaleRatio || 1;\n\n    if (navigator.userAgent.match(/(iPhone\\sOS)\\s([\\d_]+)/)) {\n      ratio *= finalArgs.iphoneFixedRatio || 1;\n    }\n\n    var finalWidth = window.innerWidth * ratio;\n\n    if (finalArgs.isUseOriginSize || finalWidth > width) {\n      // 最大不会超过原图的尺寸\n      finalWidth = width;\n    }\n\n    var maxWidth = finalArgs.maxWidth;\n\n    if (maxWidth && width > maxWidth && finalWidth > maxWidth) {\n      // 考虑到之前已经进行不超过原图的判断了\n      finalWidth = maxWidth;\n    }\n\n    var forceWidth = finalArgs.forceWidth;\n    var forceHeight = finalArgs.forceHeight;\n\n    if (forceWidth) {\n      // 使用固定宽\n      finalWidth = forceWidth;\n    }\n\n    var finalHeight = finalWidth / wPerH;\n\n    if (forceHeight) {\n      finalHeight = forceHeight;\n    }\n\n    canvasTransfer.width = finalWidth;\n    canvasTransfer.height = finalHeight;\n    ctxTransfer.drawImage(image, 0, 0, width, height, 0, 0, canvasTransfer.width, canvasTransfer.height);\n    return canvasTransfer.toDataURL(finalArgs.mime, finalArgs.quality);\n  };\n}\n\nvar ImageScale = {};\nscaleMixin(ImageScale);\nexport default ImageScale;",{"version":3,"sources":["/Users/gujiahao/Documents/work/github/artweb/src/utils/imagescale.js"],"names":["scale","data","width","height","newData","newWidth","newHeight","scaleW","scaleH","dstData","filter","dstCol","dstRow","srcCol","Math","min","srcRow","intCol","floor","intRow","dstI","srcI","j","col","row","nearestNeighborInterpolation","imgData","newImgData","getRGBAValue","srcWidth","srcHeight","newRow","newCol","newIndex","scale$1","u","v","u1","v1","rgba00","rgba01","rgba10","rgba11","partV","partV1","bilinearInterpolation","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","getRGBAValue$1","colorIndex","getPixelValue","pixelValue","newPixelValue","max","updateCoefficients","tmpPixels","p","getValue","x","y","x2","x3","y2","y3","scale$2","i","m","n","bicubicInterpolation","A","interpolationCalculate","absX","getPixelValue$1","getRGBAValue$2","scale$3","rgbaData","rgba","f1","f2","weight","bicubicInterpolation$1","extend","target","finalTarget","_len","arguments","length","rest","Array","_key","forEach","source","Object","keys","key","defaultArgs","mime","processType","defaultArgsCompress","quality","compressScaleRatio","iphoneFixedRatio","isUseOriginSize","maxWidth","forceWidth","forceHeight","scaleMixin","ImageScale","api","scaleImageData","imageData","newImageData","args","finalArgs","processTypes","curDealFunc","scaleImage","image","canvasTransfer","document","createElement","ctxTransfer","getContext","drawImage","getImageData","createImageData","putImageData","toDataURL","getPixelRatio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","ratio","window","devicePixelRatio","compressImage","wPerH","navigator","userAgent","match","finalWidth","innerWidth","finalHeight"],"mappings":";;;;AAAA;;;;AAKA,SAASA,KAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwDC,SAAxD,EAAmE;AACjE;AACA,MAAMC,MAAM,GAAGF,QAAQ,GAAGH,KAA1B;AACA,MAAMM,MAAM,GAAGF,SAAS,GAAGH,MAA3B;AACA,MAAMM,OAAO,GAAGL,OAAhB;;AAEA,MAAMM,MAAM,GAAG,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC9C,QAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,GAAG,CAAjB,EAAoBS,MAAM,GAAGJ,MAA7B,CAAf;AACA,QAAMS,MAAM,GAAGF,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqBS,MAAM,GAAGJ,MAA9B,CAAf;AACA,QAAMS,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAf;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACI,KAAL,CAAWF,MAAX,CAAf,CAJ8C,CAM9C;;AACA,QAAII,IAAI,GAAGR,MAAM,GAAGP,QAAT,GAAoBM,MAA/B;AACA,QAAIU,IAAI,GAAGF,MAAM,GAAGjB,KAAT,GAAiBe,MAA5B,CAR8C,CAU9C;;AACAG,IAAAA,IAAI,IAAI,CAAR;AACAC,IAAAA,IAAI,IAAI,CAAR;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9Bb,MAAAA,OAAO,CAACW,IAAI,GAAGE,CAAR,CAAP,GAAoBrB,IAAI,CAACoB,IAAI,GAAGC,CAAR,CAAxB;AACD;AACF,GAjBD,CANiE,CAyBjE;;;AACA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,QAAxB,EAAkCkB,GAAG,IAAI,CAAzC,EAA4C;AAC1C,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,SAAxB,EAAmCkB,GAAG,IAAI,CAA1C,EAA6C;AAC3Cd,MAAAA,MAAM,CAACa,GAAD,EAAMC,GAAN,CAAN;AACD;AACF;AACF;;AAED,SAASC,4BAAT,CAAuCC,OAAvC,EAAgDC,UAAhD,EAA4D;AAC1D3B,EAAAA,KAAK,CAAC0B,OAAO,CAACzB,IAAT,EAAeyB,OAAO,CAACxB,KAAvB,EAA8BwB,OAAO,CAACvB,MAAtC,EAA8CwB,UAAU,CAAC1B,IAAzD,EAA+D0B,UAAU,CAACzB,KAA1E,EAAiFyB,UAAU,CAACxB,MAA5F,CAAL;AAEA,SAAOwB,UAAP;AACD;AAED;;;;;AAKA;;;;;;;;;;;AASA,SAASC,YAAT,CAAuB3B,IAAvB,EAA6B4B,QAA7B,EAAuCC,SAAvC,EAAkDN,GAAlD,EAAuDD,GAAvD,EAA4D;AAC1D,MAAIQ,MAAM,GAAGP,GAAb;AACA,MAAIQ,MAAM,GAAGT,GAAb;;AAEA,MAAIQ,MAAM,IAAID,SAAd,EAAyB;AACvBC,IAAAA,MAAM,GAAGD,SAAS,GAAG,CAArB;AACD,GAFD,MAEO,IAAIC,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,MAAM,IAAIH,QAAd,EAAwB;AACtBG,IAAAA,MAAM,GAAGH,QAAQ,GAAG,CAApB;AACD,GAFD,MAEO,IAAIG,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,QAAQ,GAAGF,MAAM,GAAGF,QAAT,GAAoBG,MAAnC;AAEAC,EAAAA,QAAQ,IAAI,CAAZ;AAEA,SAAO,CAAChC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAL,EAAqBhC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAzB,EAAyChC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAA7C,EAA6DhC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAjE,CAAP;AACD;;AAED,SAASC,OAAT,CAAkBjC,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,QAAhD,EAA0DC,SAA1D,EAAqE;AACnE;AACA,MAAMC,MAAM,GAAGF,QAAQ,GAAGH,KAA1B;AACA,MAAMM,MAAM,GAAGF,SAAS,GAAGH,MAA3B;AACA,MAAMM,OAAO,GAAGL,OAAhB;;AAEA,MAAMM,MAAM,GAAG,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC9C;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,GAAG,CAAjB,EAAoBS,MAAM,GAAGJ,MAA7B,CAAf;AACA,QAAMS,MAAM,GAAGF,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqBS,MAAM,GAAGJ,MAA9B,CAAf;AACA,QAAMS,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAf;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACI,KAAL,CAAWF,MAAX,CAAf,CAL8C,CAM9C;;AACA,QAAMmB,CAAC,GAAGtB,MAAM,GAAGI,MAAnB;AACA,QAAMmB,CAAC,GAAGpB,MAAM,GAAGG,MAAnB,CAR8C,CAS9C;;AACA,QAAMkB,EAAE,GAAG,IAAIF,CAAf;AACA,QAAMG,EAAE,GAAG,IAAIF,CAAf,CAX8C,CAa9C;;AACA,QAAIhB,IAAI,GAAGR,MAAM,GAAGP,QAAT,GAAoBM,MAA/B,CAd8C,CAgB9C;;AACAS,IAAAA,IAAI,IAAI,CAAR;AAEA,QAAMmB,MAAM,GAAGX,YAAY,CAAC3B,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG,CAA/B,EAAkCF,MAAM,GAAG,CAA3C,CAA3B;AACA,QAAMuB,MAAM,GAAGZ,YAAY,CAAC3B,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG,CAA/B,EAAkCF,MAAM,GAAG,CAA3C,CAA3B;AACA,QAAMwB,MAAM,GAAGb,YAAY,CAAC3B,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG,CAA/B,EAAkCF,MAAM,GAAG,CAA3C,CAA3B;AACA,QAAMyB,MAAM,GAAGd,YAAY,CAAC3B,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG,CAA/B,EAAkCF,MAAM,GAAG,CAA3C,CAA3B;;AAEA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,UAAMqB,KAAK,GAAGP,CAAC,IAAIC,EAAE,GAAGI,MAAM,CAACnB,CAAD,CAAX,GAAiBa,CAAC,GAAGO,MAAM,CAACpB,CAAD,CAA/B,CAAf;AACA,UAAMsB,MAAM,GAAGN,EAAE,IAAID,EAAE,GAAGE,MAAM,CAACjB,CAAD,CAAX,GAAiBa,CAAC,GAAGK,MAAM,CAAClB,CAAD,CAA/B,CAAjB;AAEAb,MAAAA,OAAO,CAACW,IAAI,GAAGE,CAAR,CAAP,GAAoBqB,KAAK,GAAGC,MAA5B;AACD;AACF,GA9BD;;AAgCA,OAAK,IAAIrB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,QAAxB,EAAkCkB,GAAG,IAAI,CAAzC,EAA4C;AAC1C,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,SAAxB,EAAmCkB,GAAG,IAAI,CAA1C,EAA6C;AAC3Cd,MAAAA,MAAM,CAACa,GAAD,EAAMC,GAAN,CAAN;AACD;AACF;AACF;;AAED,SAASqB,qBAAT,CAAgCnB,OAAhC,EAAyCC,UAAzC,EAAqD;AACnDO,EAAAA,OAAO,CAACR,OAAO,CAACzB,IAAT,EAAeyB,OAAO,CAACxB,KAAvB,EAA8BwB,OAAO,CAACvB,MAAtC,EAA8CwB,UAAU,CAAC1B,IAAzD,EAA+D0B,UAAU,CAACzB,KAA1E,EAAiFyB,UAAU,CAACxB,MAA5F,CAAP;AAEA,SAAOwB,UAAP;AACD;AAED;;;;;;;;;;;;;;AAYA,IAAImB,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;AACA,IAAIC,GAAG,GAAG,EAAV;;AAEA,IAAMC,cAAc,GAAG,SAASlC,YAAT,CAAuB3B,IAAvB,EAA6B4B,QAA7B,EAAuCC,SAAvC,EAAkDN,GAAlD,EAAuDD,GAAvD,EAA4DwC,UAA5D,EAAwE;AAC7F,MAAIhC,MAAM,GAAGP,GAAb;AACA,MAAIQ,MAAM,GAAGT,GAAb;;AAEA,MAAIQ,MAAM,IAAID,SAAd,EAAyB;AACvBC,IAAAA,MAAM,GAAGD,SAAS,GAAG,CAArB;AACD,GAFD,MAEO,IAAIC,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,MAAM,IAAIH,QAAd,EAAwB;AACtBG,IAAAA,MAAM,GAAGH,QAAQ,GAAG,CAApB;AACD,GAFD,MAEO,IAAIG,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,QAAQ,GAAGF,MAAM,GAAGF,QAAT,GAAoBG,MAAnC;AAEAC,EAAAA,QAAQ,IAAI,CAAZ;AAEA,SAAOhC,IAAI,CAACgC,QAAQ,GAAG8B,UAAZ,CAAX;AACD,CArBD;;AAuBA,IAAMC,aAAa,GAAG,SAASA,aAAT,CAAwBC,UAAxB,EAAoC;AACxD,MAAIC,aAAa,GAAGD,UAApB;AAEAC,EAAAA,aAAa,GAAGpD,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcmD,aAAd,CAAhB;AACAA,EAAAA,aAAa,GAAGpD,IAAI,CAACqD,GAAL,CAAS,CAAT,EAAYD,aAAZ,CAAhB;AAEA,SAAOA,aAAP;AACD,CAPD;;AASA,IAAME,kBAAkB,GAAG,SAASA,kBAAT,CAA6BC,SAA7B,EAAwC;AACjE,MAAMC,CAAC,GAAGD,SAAV;AAEAvB,EAAAA,GAAG,GAAGwB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAN;AACAvB,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOuB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7B;AACAtB,EAAAA,GAAG,GAAGsB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAhB,GAA0B,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9B,GAAwC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApD;AACArB,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOqB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvB,GAAiC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvC,GAAiD,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7D;AAEApB,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOoB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7B;AACAnB,EAAAA,GAAG,GAAG,OAAOmB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkC,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzC,GAAmD,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAhE;AACAlB,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOkB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkCA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlC,GAA4C,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnD,GAA6D,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnE,GAA6E,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApF,GAA8FA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9F,GAAwG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArH;AACAjB,EAAAA,GAAG,GAAG,OAAOiB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkC,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzC,GAAmD,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1D,GAAoE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA3E,GAAqF,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5F,GAAsG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7G,GAAuH,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApI;AAEAhB,EAAAA,GAAG,GAAGgB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAhB,GAA0B,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9B,GAAwC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApD;AACAf,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOe,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvB,GAAiC,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxC,GAAkD,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzD,GAAmEA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnE,GAA6EA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7E,GAAuF,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9F,GAAwG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArH;AACAd,EAAAA,GAAG,GAAGc,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,IAAU,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAhB,GAA0B,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9B,GAAwC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9C,GAAwD,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9D,GAAwE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA/E,GAAyF,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7F,GAAuG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9G,GAAwH,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5H,GAAsI,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1I,GAAoJ,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxJ,GAAkKA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlK,GAA4K,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlL,GAA4L,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnM,GAA6MA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7M,GAAuN,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApO;AACAb,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOa,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvB,GAAiC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvC,GAAiD,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvD,GAAiE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxE,GAAkF,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzF,GAAmG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1G,GAAoH,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA3H,GAAqIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArI,GAA+I,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnJ,GAA6J,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAjK,GAA2KA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA3K,GAAqL,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5L,GAAsM,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7M,GAAuN,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9N,GAAwO,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArP;AAEAZ,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOY,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvB,GAAiC,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAvC,GAAiD,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7D;AACAX,EAAAA,GAAG,GAAG,OAAOW,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkC,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzC,GAAmD,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1D,GAAoE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA3E,GAAqF,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5F,GAAsG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7G,GAAuH,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApI;AACAV,EAAAA,GAAG,GAAG,CAAC,GAAD,GAAOU,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkCA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlC,GAA4C,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnD,GAA6D,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnE,GAA6E,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApF,GAA8F,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlG,GAA4G,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnH,GAA6H,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnI,GAA6I,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApJ,GAA8J,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlK,GAA4K,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnL,GAA6L,MAAMA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnM,GAA6M,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApN,GAA8NA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9N,GAAwO,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArP;AACAT,EAAAA,GAAG,GAAG,OAAOS,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAP,GAAiB,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAxB,GAAkC,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAzC,GAAmD,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA1D,GAAoE,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA3E,GAAqF,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5F,GAAsG,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA7G,GAAuH,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA9H,GAAwI,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA/I,GAAyJ,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAhK,GAA0K,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAjL,GAA2L,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAlM,GAA4M,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnN,GAA6N,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApO,GAA8O,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArP,GAA+P,OAAOA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAA5Q;AACD,CAtBD;;AAwBA,IAAMC,QAAQ,GAAG,SAASA,QAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACxC,MAAMC,EAAE,GAAGF,CAAC,GAAGA,CAAf;AACA,MAAMG,EAAE,GAAGD,EAAE,GAAGF,CAAhB;AACA,MAAMI,EAAE,GAAGH,CAAC,GAAGA,CAAf;AACA,MAAMI,EAAE,GAAGD,EAAE,GAAGH,CAAhB;AAEA,SAAO3B,GAAG,GAAGC,GAAG,GAAG0B,CAAZ,GAAgBzB,GAAG,GAAG4B,EAAtB,GAA2B3B,GAAG,GAAG4B,EAAjC,GAAsC,CAAC3B,GAAG,GAAGC,GAAG,GAAGsB,CAAZ,GAAgBrB,GAAG,GAAGwB,EAAtB,GAA2BvB,GAAG,GAAGwB,EAAlC,IAAwCL,CAA9E,GAAkF,CAAClB,GAAG,GAAGC,GAAG,GAAGkB,CAAZ,GAAgBjB,GAAG,GAAGoB,EAAtB,GAA2BnB,GAAG,GAAGoB,EAAlC,IAAwCH,EAA1H,GAA+H,CAAChB,GAAG,GAAGC,GAAG,GAAGc,CAAZ,GAAgBb,GAAG,GAAGgB,EAAtB,GAA2Bf,GAAG,GAAGgB,EAAlC,IAAwCF,EAA9K;AACD,CAPD;;AASA,SAASG,OAAT,CAAkB7E,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,QAAhD,EAA0DC,SAA1D,EAAqE;AACnE,MAAMG,OAAO,GAAGL,OAAhB,CADmE,CAGnE;;AACA,MAAMG,MAAM,GAAGF,QAAQ,GAAGH,KAA1B;AACA,MAAMM,MAAM,GAAGF,SAAS,GAAGH,MAA3B;;AAEA,MAAMO,MAAM,GAAG,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC9C;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,GAAG,CAAjB,EAAoBS,MAAM,GAAGJ,MAA7B,CAAf;AACA,QAAMS,MAAM,GAAGF,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqBS,MAAM,GAAGJ,MAA9B,CAAf;AACA,QAAMS,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAf;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACI,KAAL,CAAWF,MAAX,CAAf,CAL8C,CAM9C;;AACA,QAAMmB,CAAC,GAAGtB,MAAM,GAAGI,MAAnB;AACA,QAAMmB,CAAC,GAAGpB,MAAM,GAAGG,MAAnB,CAR8C,CAU9C;;AACA,QAAIC,IAAI,GAAGR,MAAM,GAAGP,QAAT,GAAoBM,MAA/B;AAEAS,IAAAA,IAAI,IAAI,CAAR,CAb8C,CAe9C;;AACA,QAAMiD,SAAS,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf,EAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA7B,EAA2C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA3C,CAAlB,CAhB8C,CAkB9C;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B;AACA,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,IAAI,CAA9B,EAAiC;AAC/B,aAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,IAAI,CAA9B,EAAiC;AAC/BZ,UAAAA,SAAS,CAACW,CAAC,GAAG,CAAL,CAAT,CAAiBC,CAAC,GAAG,CAArB,IAA0BnB,cAAc,CAAC7D,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG6D,CAA/B,EAAkC/D,MAAM,GAAGgE,CAA3C,EAA8CF,CAA9C,CAAxC;AACD;AACF,OAN6B,CAQ9B;;;AACAX,MAAAA,kBAAkB,CAACC,SAAD,CAAlB,CAT8B,CAU9B;;AACA5D,MAAAA,OAAO,CAACW,IAAI,GAAG2D,CAAR,CAAP,GAAoBf,aAAa,CAACO,QAAQ,CAACnC,CAAD,EAAID,CAAJ,CAAT,CAAjC;AACD;AACF,GAhCD,CAPmE,CAyCnE;;;AACA,OAAK,IAAIZ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,QAAxB,EAAkCkB,GAAG,IAAI,CAAzC,EAA4C;AAC1C,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,SAAxB,EAAmCkB,GAAG,IAAI,CAA1C,EAA6C;AAC3Cd,MAAAA,MAAM,CAACa,GAAD,EAAMC,GAAN,CAAN;AACD;AACF;AACF;;AAED,SAAS0D,oBAAT,CAA+BxD,OAA/B,EAAwCC,UAAxC,EAAoD;AAClDmD,EAAAA,OAAO,CAACpD,OAAO,CAACzB,IAAT,EAAeyB,OAAO,CAACxB,KAAvB,EAA8BwB,OAAO,CAACvB,MAAtC,EAA8CwB,UAAU,CAAC1B,IAAzD,EAA+D0B,UAAU,CAACzB,KAA1E,EAAiFyB,UAAU,CAACxB,MAA5F,CAAP;AAEA,SAAOwB,UAAP;AACD;AAED;;;;;;;;;;;;;AAaA;;;;;;;;;AAOA,IAAMwD,CAAC,GAAG,CAAC,CAAX;;AAEA,SAASC,sBAAT,CAAiCZ,CAAjC,EAAoC;AAClC,MAAMa,IAAI,GAAGb,CAAC,IAAI,CAAL,GAASA,CAAT,GAAa,CAACA,CAA3B;AACA,MAAME,EAAE,GAAGF,CAAC,GAAGA,CAAf;AACA,MAAMG,EAAE,GAAGU,IAAI,GAAGX,EAAlB;;AAEA,MAAIW,IAAI,IAAI,CAAZ,EAAe;AACb,WAAO,IAAI,CAACF,CAAC,GAAG,CAAL,IAAUT,EAAd,GAAmB,CAACS,CAAC,GAAG,CAAL,IAAUR,EAApC;AACD;;AAAC,MAAIU,IAAI,IAAI,CAAZ,EAAe;AACf,WAAO,CAAC,CAAD,GAAKF,CAAL,GAAS,IAAIA,CAAJ,GAAQE,IAAjB,GAAwB,IAAIF,CAAJ,GAAQT,EAAhC,GAAqCS,CAAC,GAAGR,EAAhD;AACD;;AAED,SAAO,CAAP;AACD;;AAED,SAASW,eAAT,CAA0BrB,UAA1B,EAAsC;AACpC,MAAIC,aAAa,GAAGD,UAApB;AAEAC,EAAAA,aAAa,GAAGpD,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcmD,aAAd,CAAhB;AACAA,EAAAA,aAAa,GAAGpD,IAAI,CAACqD,GAAL,CAAS,CAAT,EAAYD,aAAZ,CAAhB;AAEA,SAAOA,aAAP;AACD;AAED;;;;;;;;;;;AASA,SAASqB,cAAT,CAAyBtF,IAAzB,EAA+B4B,QAA/B,EAAyCC,SAAzC,EAAoDN,GAApD,EAAyDD,GAAzD,EAA8D;AAC5D,MAAIQ,MAAM,GAAGP,GAAb;AACA,MAAIQ,MAAM,GAAGT,GAAb;;AAEA,MAAIQ,MAAM,IAAID,SAAd,EAAyB;AACvBC,IAAAA,MAAM,GAAGD,SAAS,GAAG,CAArB;AACD,GAFD,MAEO,IAAIC,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,MAAM,IAAIH,QAAd,EAAwB;AACtBG,IAAAA,MAAM,GAAGH,QAAQ,GAAG,CAApB;AACD,GAFD,MAEO,IAAIG,MAAM,GAAG,CAAb,EAAgB;AACrBA,IAAAA,MAAM,GAAG,CAAT;AACD;;AAED,MAAIC,QAAQ,GAAGF,MAAM,GAAGF,QAAT,GAAoBG,MAAnC;AAEAC,EAAAA,QAAQ,IAAI,CAAZ;AAEA,SAAO,CAAChC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAL,EAAqBhC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAzB,EAAyChC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAA7C,EAA6DhC,IAAI,CAACgC,QAAQ,GAAG,CAAZ,CAAjE,CAAP;AACD;;AAED,SAASuD,OAAT,CAAkBvF,IAAlB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,QAAhD,EAA0DC,SAA1D,EAAqE;AACnE,MAAMG,OAAO,GAAGL,OAAhB,CADmE,CAGnE;;AACA,MAAMG,MAAM,GAAGF,QAAQ,GAAGH,KAA1B;AACA,MAAMM,MAAM,GAAGF,SAAS,GAAGH,MAA3B;;AAEA,MAAMO,MAAM,GAAG,SAASA,MAAT,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAC9C;AACA,QAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASb,KAAK,GAAG,CAAjB,EAAoBS,MAAM,GAAGJ,MAA7B,CAAf;AACA,QAAMS,MAAM,GAAGF,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqBS,MAAM,GAAGJ,MAA9B,CAAf;AACA,QAAMS,MAAM,GAAGH,IAAI,CAACI,KAAL,CAAWL,MAAX,CAAf;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACI,KAAL,CAAWF,MAAX,CAAf,CAL8C,CAM9C;;AACA,QAAMmB,CAAC,GAAGtB,MAAM,GAAGI,MAAnB;AACA,QAAMmB,CAAC,GAAGpB,MAAM,GAAGG,MAAnB,CAR8C,CAU9C;;AACA,QAAIC,IAAI,GAAGR,MAAM,GAAGP,QAAT,GAAoBM,MAA/B;AAEAS,IAAAA,IAAI,IAAI,CAAR,CAb8C,CAe9C;;AACA,QAAMqE,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB,CAhB8C,CAkB9C;AACA;AACA;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,IAAI,CAA9B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAC,CAAd,EAAiBA,CAAC,IAAI,CAAtB,EAAyBA,CAAC,IAAI,CAA9B,EAAiC;AAC/B,YAAMS,IAAI,GAAGH,cAAc,CAACtF,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBgB,MAAM,GAAG6D,CAA/B,EAAkC/D,MAAM,GAAGgE,CAA3C,CAA3B,CAD+B,CAE/B;AACA;;AACA,YAAMU,EAAE,GAAGP,sBAAsB,CAACJ,CAAC,GAAG5C,CAAL,CAAjC;AACA,YAAMwD,EAAE,GAAGR,sBAAsB,CAACH,CAAC,GAAG9C,CAAL,CAAjC;AACA,YAAM0D,MAAM,GAAGF,EAAE,GAAGC,EAApB;AAEAH,QAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeC,IAAI,CAAC,CAAD,CAAJ,GAAUG,MAAzB;AACAJ,QAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeC,IAAI,CAAC,CAAD,CAAJ,GAAUG,MAAzB;AACAJ,QAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeC,IAAI,CAAC,CAAD,CAAJ,GAAUG,MAAzB;AACAJ,QAAAA,QAAQ,CAAC,CAAD,CAAR,IAAeC,IAAI,CAAC,CAAD,CAAJ,GAAUG,MAAzB;AACD;AACF;;AAEDpF,IAAAA,OAAO,CAACW,IAAI,GAAG,CAAR,CAAP,GAAoBkE,eAAe,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAnC;AACAhF,IAAAA,OAAO,CAACW,IAAI,GAAG,CAAR,CAAP,GAAoBkE,eAAe,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAnC;AACAhF,IAAAA,OAAO,CAACW,IAAI,GAAG,CAAR,CAAP,GAAoBkE,eAAe,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAnC;AACAhF,IAAAA,OAAO,CAACW,IAAI,GAAG,CAAR,CAAP,GAAoBkE,eAAe,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAnC;AACD,GAzCD,CAPmE,CAkDnE;;;AACA,OAAK,IAAIlE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,QAAxB,EAAkCkB,GAAG,IAAI,CAAzC,EAA4C;AAC1C,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGlB,SAAxB,EAAmCkB,GAAG,IAAI,CAA1C,EAA6C;AAC3Cd,MAAAA,MAAM,CAACa,GAAD,EAAMC,GAAN,CAAN;AACD;AACF;AACF;;AAED,SAASsE,sBAAT,CAAiCpE,OAAjC,EAA0CC,UAA1C,EAAsD;AACpD6D,EAAAA,OAAO,CAAC9D,OAAO,CAACzB,IAAT,EAAeyB,OAAO,CAACxB,KAAvB,EAA8BwB,OAAO,CAACvB,MAAtC,EAA8CwB,UAAU,CAAC1B,IAAzD,EAA+D0B,UAAU,CAACzB,KAA1E,EAAiFyB,UAAU,CAACxB,MAA5F,CAAP;AAEA,SAAOwB,UAAP;AACD;;AAED,SAASoE,MAAT,CAAiBC,MAAjB,EAAyB;AACvB,MAAMC,WAAW,GAAGD,MAApB;;AAEA,OAAK,IAAIE,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAzC,EAAoEK,IAAI,GAAG,CAAhF,EAAmFA,IAAI,GAAGL,IAA1F,EAAgGK,IAAI,EAApG,EAAwG;AACtGF,IAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAEDF,EAAAA,IAAI,CAACG,OAAL,CAAa,UAACC,MAAD,EAAY;AACvBA,IAAAA,MAAM,IAAIC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBD,OAApB,CAA4B,UAACI,GAAD,EAAS;AAC7CX,MAAAA,WAAW,CAACW,GAAD,CAAX,GAAmBH,MAAM,CAACG,GAAD,CAAzB;AACD,KAFS,CAAV;AAGD,GAJD;AAMA,SAAOX,WAAP;AACD;AAED;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;AAQA,IAAMY,WAAW,GAAG;AAClB3G,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE,EAFU;AAGlB2G,EAAAA,IAAI,EAAE,WAHY;AAIlB;AACA;AACA;AACA;AACAC,EAAAA,WAAW,EAAE;AARK,CAApB;AAWA,IAAMC,mBAAmB,GAAG;AAC1B;AACAC,EAAAA,OAAO,EAAE,IAFiB;AAG1BH,EAAAA,IAAI,EAAE,YAHoB;AAI1B;AACAI,EAAAA,kBAAkB,EAAE,CALM;AAM1B;AACAC,EAAAA,gBAAgB,EAAE,GAPQ;AAQ1B;AACAC,EAAAA,eAAe,EAAE,KATS;AAU1B;AACAC,EAAAA,QAAQ,EAAE,CAXgB;AAY1B;AACAC,EAAAA,UAAU,EAAE,CAbc;AAc1B;AACAC,EAAAA,WAAW,EAAE;AAfa,CAA5B;;AAkBA,SAASC,UAAT,CAAqBC,UAArB,EAAiC;AAC/B,MAAMC,GAAG,GAAGD,UAAZ;AAEA;;;;;;;AAMAC,EAAAA,GAAG,CAACC,cAAJ,GAAqB,SAASA,cAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkDC,IAAlD,EAAwD;AAC3E,QAAMC,SAAS,GAAGhC,MAAM,CAAC,EAAD,EAAKc,WAAL,EAAkBiB,IAAlB,CAAxB;AACA,QAAME,YAAY,GAAG,CAACvG,4BAAD,EAA+BoB,qBAA/B,EAAsDqC,oBAAtD,EAA4EY,sBAA5E,CAArB;AACA,QAAMmC,WAAW,GAAGD,YAAY,CAACD,SAAS,CAAChB,WAAX,CAAhC;AAEAkB,IAAAA,WAAW,CAACL,SAAD,EAAYC,YAAZ,CAAX;AACD,GAND;AAQA;;;;;;;;AAMAH,EAAAA,GAAG,CAACQ,UAAJ,GAAiB,SAASA,UAAT,CAAqBC,KAArB,EAA4BL,IAA5B,EAAkC;AAAA,QACzC5H,KADyC,GAC/BiI,KAD+B,CACzCjI,KADyC;AAAA,QAEzCC,MAFyC,GAE9BgI,KAF8B,CAEzChI,MAFyC;AAGjD,QAAM4H,SAAS,GAAGhC,MAAM,CAAC,EAAD,EAAKc,WAAL,EAAkBiB,IAAlB,CAAxB;AAEA,QAAMM,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAvB;AACA,QAAMC,WAAW,GAAGH,cAAc,CAACI,UAAf,CAA0B,IAA1B,CAApB;AAEAJ,IAAAA,cAAc,CAAClI,KAAf,GAAuBA,KAAvB;AACAkI,IAAAA,cAAc,CAACjI,MAAf,GAAwBA,MAAxB;AAEAoI,IAAAA,WAAW,CAACE,SAAZ,CAAsBN,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCjI,KAAnC,EAA0CC,MAA1C;AAEA,QAAMyH,SAAS,GAAGW,WAAW,CAACG,YAAZ,CAAyB,CAAzB,EAA4B,CAA5B,EAA+BxI,KAA/B,EAAsCC,MAAtC,CAAlB;AACA,QAAM0H,YAAY,GAAGU,WAAW,CAACI,eAAZ,CAA4BZ,SAAS,CAAC7H,KAAtC,EAA6C6H,SAAS,CAAC5H,MAAvD,CAArB;AAEAuH,IAAAA,GAAG,CAACC,cAAJ,CAAmBC,SAAnB,EAA8BC,YAA9B,EAA4CE,SAA5C;AAEAK,IAAAA,cAAc,CAAClI,KAAf,GAAuB2H,YAAY,CAAC3H,KAApC;AACAkI,IAAAA,cAAc,CAACjI,MAAf,GAAwB0H,YAAY,CAAC1H,MAArC;AAEAoI,IAAAA,WAAW,CAACK,YAAZ,CAAyBf,YAAzB,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmDO,cAAc,CAAClI,KAAlE,EAAyEkI,cAAc,CAACjI,MAAxF,EArBiD,CAuBjD;AACA;AACA;;AAEA,WAAOiI,cAAc,CAACS,SAAf,CAAyBd,SAAS,CAACjB,IAAnC,EAAyC,GAAzC,CAAP;AACD,GA5BD;;AA8BA,WAASgC,aAAT,CAAwBC,OAAxB,EAAiC;AAC/B,QAAMC,YAAY,GAAGD,OAAO,CAACE,sBAAR,IAAkCF,OAAO,CAACG,4BAA1C,IAA0EH,OAAO,CAACI,yBAAlF,IAA+GJ,OAAO,CAACK,wBAAvH,IAAmJL,OAAO,CAACM,uBAA3J,IAAsLN,OAAO,CAACE,sBAA9L,IAAwN,CAA7O;AAEA,QAAMK,KAAK,GAAG,CAACC,MAAM,CAACC,gBAAP,IAA2B,CAA5B,IAAiCR,YAA/C;AAEA,WAAOM,KAAP;AACD;AAED;;;;;;;;;AAOA5B,EAAAA,GAAG,CAAC+B,aAAJ,GAAoB,SAASA,aAAT,CAAwBtB,KAAxB,EAA+BL,IAA/B,EAAqC;AAAA,QAC/C5H,KAD+C,GACrCiI,KADqC,CAC/CjI,KAD+C;AAAA,QAE/CC,MAF+C,GAEpCgI,KAFoC,CAE/ChI,MAF+C;AAGvD,QAAMuJ,KAAK,GAAGxJ,KAAK,GAAGC,MAAtB;AACA,QAAM4H,SAAS,GAAGhC,MAAM,CAAC,EAAD,EAAKiB,mBAAL,EAA0Bc,IAA1B,CAAxB;AAEA,QAAMM,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAvB;AACA,QAAMC,WAAW,GAAGH,cAAc,CAACI,UAAf,CAA0B,IAA1B,CAApB;AAEA,QAAIc,KAAK,GAAGR,aAAa,CAACP,WAAD,CAAzB;AAEAe,IAAAA,KAAK,IAAIvB,SAAS,CAACb,kBAAV,IAAgC,CAAzC;;AACA,QAAIyC,SAAS,CAACC,SAAV,CAAoBC,KAApB,CAA0B,wBAA1B,CAAJ,EAAyD;AACvDP,MAAAA,KAAK,IAAIvB,SAAS,CAACZ,gBAAV,IAA8B,CAAvC;AACD;;AAED,QAAI2C,UAAU,GAAGP,MAAM,CAACQ,UAAP,GAAoBT,KAArC;;AAEA,QAAIvB,SAAS,CAACX,eAAV,IAA6B0C,UAAU,GAAG5J,KAA9C,EAAqD;AACnD;AACA4J,MAAAA,UAAU,GAAG5J,KAAb;AACD;;AArBsD,QAuB/CmH,QAvB+C,GAuBlCU,SAvBkC,CAuB/CV,QAvB+C;;AAyBvD,QAAIA,QAAQ,IAAInH,KAAK,GAAGmH,QAApB,IAAgCyC,UAAU,GAAGzC,QAAjD,EAA2D;AACzD;AACAyC,MAAAA,UAAU,GAAGzC,QAAb;AACD;;AA5BsD,QA6B/CC,UA7B+C,GA6BhCS,SA7BgC,CA6B/CT,UA7B+C;AAAA,QA8B/CC,WA9B+C,GA8B/BQ,SA9B+B,CA8B/CR,WA9B+C;;AAgCvD,QAAID,UAAJ,EAAgB;AACd;AACAwC,MAAAA,UAAU,GAAGxC,UAAb;AACD;;AAED,QAAI0C,WAAW,GAAGF,UAAU,GAAGJ,KAA/B;;AAEA,QAAInC,WAAJ,EAAiB;AACfyC,MAAAA,WAAW,GAAGzC,WAAd;AACD;;AAEDa,IAAAA,cAAc,CAAClI,KAAf,GAAuB4J,UAAvB;AACA1B,IAAAA,cAAc,CAACjI,MAAf,GAAwB6J,WAAxB;AACAzB,IAAAA,WAAW,CAACE,SAAZ,CAAsBN,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCjI,KAAnC,EAA0CC,MAA1C,EAAkD,CAAlD,EAAqD,CAArD,EAAwDiI,cAAc,CAAClI,KAAvE,EAA8EkI,cAAc,CAACjI,MAA7F;AAEA,WAAOiI,cAAc,CAACS,SAAf,CAAyBd,SAAS,CAACjB,IAAnC,EAAyCiB,SAAS,CAACd,OAAnD,CAAP;AACD,GAhDD;AAiDD;;AAED,IAAMQ,UAAU,GAAG,EAAnB;AAEAD,UAAU,CAACC,UAAD,CAAV;AAEA,eAAeA,UAAf","sourcesContent":["/**\n * 缩放算法\n * 最临邻近插值\n */\n\nfunction scale (data, width, height, newData, newWidth, newHeight) {\n  // 计算压缩后的缩放比\n  const scaleW = newWidth / width;\n  const scaleH = newHeight / height;\n  const dstData = newData;\n\n  const filter = function filter (dstCol, dstRow) {\n    const srcCol = Math.min(width - 1, dstCol / scaleW);\n    const srcRow = Math.min(height - 1, dstRow / scaleH);\n    const intCol = Math.floor(srcCol);\n    const intRow = Math.floor(srcRow);\n\n    // 真实的index，因为数组是一维的\n    let dstI = dstRow * newWidth + dstCol;\n    let srcI = intRow * width + intCol;\n\n    // rgba，所以要乘以4\n    dstI *= 4;\n    srcI *= 4;\n\n    for (let j = 0; j <= 3; j += 1) {\n      dstData[dstI + j] = data[srcI + j];\n    }\n  };\n\n  // 区块\n  for (let col = 0; col < newWidth; col += 1) {\n    for (let row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction nearestNeighborInterpolation (imgData, newImgData) {\n  scale(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n\n  return newImgData;\n}\n\n/**\n * 缩放算法\n * 双线性差值，会损坏原图（带低通滤波器效果）\n */\n\n/**\n * 获取某行某列的像素对于的rgba值\n * @param {Object} data 图像数据\n * @param {Number} srcWidth 宽度\n * @param {Number} srcHeight 高度\n * @param {Number} row 目标像素的行\n * @param {Number} col 目标像素的列\n * @returns {String} rgba 颜色值\n */\nfunction getRGBAValue (data, srcWidth, srcHeight, row, col) {\n  let newRow = row;\n  let newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  let newIndex = newRow * srcWidth + newCol;\n\n  newIndex *= 4;\n\n  return [data[newIndex + 0], data[newIndex + 1], data[newIndex + 2], data[newIndex + 3]];\n}\n\nfunction scale$1 (data, width, height, newData, newWidth, newHeight) {\n  // 计算压缩后的缩放比\n  const scaleW = newWidth / width;\n  const scaleH = newHeight / height;\n  const dstData = newData;\n\n  const filter = function filter (dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    const srcCol = Math.min(width - 1, dstCol / scaleW);\n    const srcRow = Math.min(height - 1, dstRow / scaleH);\n    const intCol = Math.floor(srcCol);\n    const intRow = Math.floor(srcRow);\n    // 计算u和v\n    const u = srcCol - intCol;\n    const v = srcRow - intRow;\n    // 1-u与1-v\n    const u1 = 1 - u;\n    const v1 = 1 - v;\n\n    // 真实的index，因为数组是一维的\n    let dstI = dstRow * newWidth + dstCol;\n\n    // rgba，所以要乘以4\n    dstI *= 4;\n\n    const rgba00 = getRGBAValue(data, width, height, intRow + 0, intCol + 0);\n    const rgba01 = getRGBAValue(data, width, height, intRow + 0, intCol + 1);\n    const rgba10 = getRGBAValue(data, width, height, intRow + 1, intCol + 0);\n    const rgba11 = getRGBAValue(data, width, height, intRow + 1, intCol + 1);\n\n    for (let j = 0; j <= 3; j += 1) {\n      const partV = v * (u1 * rgba10[j] + u * rgba11[j]);\n      const partV1 = v1 * (u1 * rgba00[j] + u * rgba01[j]);\n\n      dstData[dstI + j] = partV + partV1;\n    }\n  };\n\n  for (let col = 0; col < newWidth; col += 1) {\n    for (let row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bilinearInterpolation (imgData, newImgData) {\n  scale$1(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n\n  return newImgData;\n}\n\n/**\n * 缩放算法\n * 双立方（三次）卷积插值，图像更真实\n * 计算周围16个点\n * 取一阶导数值为二阶差分值的情况，满足插值函数一阶导函数连续\n * 函数逼近程度和三次样条插值效果一样，非常的高\n *\n * 公式：（矩阵乘法）\n * 推导公式\n * http://blog.csdn.net/qq_24451605/article/details/49474113\n * https://en.wikipedia.org/wiki/Bicubic_interpolation\n * */\nlet a00 = '';\nlet a01 = '';\nlet a02 = '';\nlet a03 = '';\nlet a10 = '';\nlet a11 = '';\nlet a12 = '';\nlet a13 = '';\nlet a20 = '';\nlet a21 = '';\nlet a22 = '';\nlet a23 = '';\nlet a30 = '';\nlet a31 = '';\nlet a32 = '';\nlet a33 = '';\n\nconst getRGBAValue$1 = function getRGBAValue (data, srcWidth, srcHeight, row, col, colorIndex) {\n  let newRow = row;\n  let newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  let newIndex = newRow * srcWidth + newCol;\n\n  newIndex *= 4;\n\n  return data[newIndex + colorIndex];\n};\n\nconst getPixelValue = function getPixelValue (pixelValue) {\n  let newPixelValue = pixelValue;\n\n  newPixelValue = Math.min(255, newPixelValue);\n  newPixelValue = Math.max(0, newPixelValue);\n\n  return newPixelValue;\n};\n\nconst updateCoefficients = function updateCoefficients (tmpPixels) {\n  const p = tmpPixels;\n\n  a00 = p[1][1];\n  a01 = -0.5 * p[1][0] + 0.5 * p[1][2];\n  a02 = p[1][0] - 2.5 * p[1][1] + 2 * p[1][2] - 0.5 * p[1][3];\n  a03 = -0.5 * p[1][0] + 1.5 * p[1][1] - 1.5 * p[1][2] + 0.5 * p[1][3];\n\n  a10 = -0.5 * p[0][1] + 0.5 * p[2][1];\n  a11 = 0.25 * p[0][0] - 0.25 * p[0][2] - 0.25 * p[2][0] + 0.25 * p[2][2];\n  a12 = -0.5 * p[0][0] + 1.25 * p[0][1] - p[0][2] + 0.25 * p[0][3] + 0.5 * p[2][0] - 1.25 * p[2][1] + p[2][2] - 0.25 * p[2][3];\n  a13 = 0.25 * p[0][0] - 0.75 * p[0][1] + 0.75 * p[0][2] - 0.25 * p[0][3] - 0.25 * p[2][0] + 0.75 * p[2][1] - 0.75 * p[2][2] + 0.25 * p[2][3];\n\n  a20 = p[0][1] - 2.5 * p[1][1] + 2 * p[2][1] - 0.5 * p[3][1];\n  a21 = -0.5 * p[0][0] + 0.5 * p[0][2] + 1.25 * p[1][0] - 1.25 * p[1][2] - p[2][0] + p[2][2] + 0.25 * p[3][0] - 0.25 * p[3][2];\n  a22 = p[0][0] - 2.5 * p[0][1] + 2 * p[0][2] - 0.5 * p[0][3] - 2.5 * p[1][0] + 6.25 * p[1][1] - 5 * p[1][2] + 1.25 * p[1][3] + 2 * p[2][0] - 5 * p[2][1] + 4 * p[2][2] - p[2][3] - 0.5 * p[3][0] + 1.25 * p[3][1] - p[3][2] + 0.25 * p[3][3];\n  a23 = -0.5 * p[0][0] + 1.5 * p[0][1] - 1.5 * p[0][2] + 0.5 * p[0][3] + 1.25 * p[1][0] - 3.75 * p[1][1] + 3.75 * p[1][2] - 1.25 * p[1][3] - p[2][0] + 3 * p[2][1] - 3 * p[2][2] + p[2][3] + 0.25 * p[3][0] - 0.75 * p[3][1] + 0.75 * p[3][2] - 0.25 * p[3][3];\n\n  a30 = -0.5 * p[0][1] + 1.5 * p[1][1] - 1.5 * p[2][1] + 0.5 * p[3][1];\n  a31 = 0.25 * p[0][0] - 0.25 * p[0][2] - 0.75 * p[1][0] + 0.75 * p[1][2] + 0.75 * p[2][0] - 0.75 * p[2][2] - 0.25 * p[3][0] + 0.25 * p[3][2];\n  a32 = -0.5 * p[0][0] + 1.25 * p[0][1] - p[0][2] + 0.25 * p[0][3] + 1.5 * p[1][0] - 3.75 * p[1][1] + 3 * p[1][2] - 0.75 * p[1][3] - 1.5 * p[2][0] + 3.75 * p[2][1] - 3 * p[2][2] + 0.75 * p[2][3] + 0.5 * p[3][0] - 1.25 * p[3][1] + p[3][2] - 0.25 * p[3][3];\n  a33 = 0.25 * p[0][0] - 0.75 * p[0][1] + 0.75 * p[0][2] - 0.25 * p[0][3] - 0.75 * p[1][0] + 2.25 * p[1][1] - 2.25 * p[1][2] + 0.75 * p[1][3] + 0.75 * p[2][0] - 2.25 * p[2][1] + 2.25 * p[2][2] - 0.75 * p[2][3] - 0.25 * p[3][0] + 0.75 * p[3][1] - 0.75 * p[3][2] + 0.25 * p[3][3];\n};\n\nconst getValue = function getValue (x, y) {\n  const x2 = x * x;\n  const x3 = x2 * x;\n  const y2 = y * y;\n  const y3 = y2 * y;\n\n  return a00 + a01 * y + a02 * y2 + a03 * y3 + (a10 + a11 * y + a12 * y2 + a13 * y3) * x + (a20 + a21 * y + a22 * y2 + a23 * y3) * x2 + (a30 + a31 * y + a32 * y2 + a33 * y3) * x3;\n};\n\nfunction scale$2 (data, width, height, newData, newWidth, newHeight) {\n  const dstData = newData;\n\n  // 计算压缩后的缩放比\n  const scaleW = newWidth / width;\n  const scaleH = newHeight / height;\n\n  const filter = function filter (dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    const srcCol = Math.min(width - 1, dstCol / scaleW);\n    const srcRow = Math.min(height - 1, dstRow / scaleH);\n    const intCol = Math.floor(srcCol);\n    const intRow = Math.floor(srcRow);\n    // 计算u和v\n    const u = srcCol - intCol;\n    const v = srcRow - intRow;\n\n    // 真实的index，因为数组是一维的\n    let dstI = dstRow * newWidth + dstCol;\n\n    dstI *= 4;\n\n    // 16个邻近像素的灰度（分别计算成rgba）\n    const tmpPixels = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n    // rgba\n    for (let i = 0; i <= 3; i += 1) {\n      // 16个临近点\n      for (let m = -1; m <= 2; m += 1) {\n        for (let n = -1; n <= 2; n += 1) {\n          tmpPixels[m + 1][n + 1] = getRGBAValue$1(data, width, height, intRow + m, intCol + n, i);\n        }\n      }\n\n      // 更新系数\n      updateCoefficients(tmpPixels);\n      // 利用uv来求值\n      dstData[dstI + i] = getPixelValue(getValue(v, u));\n    }\n  };\n\n  // 区块\n  for (let col = 0; col < newWidth; col += 1) {\n    for (let row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bicubicInterpolation (imgData, newImgData) {\n  scale$2(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n\n  return newImgData;\n}\n\n/**\n * 缩放算法\n * 双立方（三次）卷积插值，图像更真实\n * 计算周围16个点\n * 取一阶导数值为二阶差分值的情况，满足插值函数一阶导函数连续\n * 函数逼近程度和三次样条插值效果一样，非常的高\n *\n * 公式：（矩阵乘法）\n * 推导公式\n * http://blog.csdn.net/qq_24451605/article/details/49474113\n * https://en.wikipedia.org/wiki/Bicubic_interpolation\n * */\n\n/**\n * 采样公式的常数A取值,调整锐化与模糊\n * -0.5 三次Hermite样条\n * -0.75 常用值之一\n * -1 逼近y = sin(x*PI)/(x*PI)\n * -2 常用值之一\n */\nconst A = -1;\n\nfunction interpolationCalculate (x) {\n  const absX = x >= 0 ? x : -x;\n  const x2 = x * x;\n  const x3 = absX * x2;\n\n  if (absX <= 1) {\n    return 1 - (A + 3) * x2 + (A + 2) * x3;\n  } if (absX <= 2) {\n    return -4 * A + 8 * A * absX - 5 * A * x2 + A * x3;\n  }\n\n  return 0;\n}\n\nfunction getPixelValue$1 (pixelValue) {\n  let newPixelValue = pixelValue;\n\n  newPixelValue = Math.min(255, newPixelValue);\n  newPixelValue = Math.max(0, newPixelValue);\n\n  return newPixelValue;\n}\n\n/**\n * 获取某行某列的像素对于的rgba值\n * @param {Object} data 图像数据\n * @param {Number} srcWidth 宽度\n * @param {Number} srcHeight 高度\n * @param {Number} row 目标像素的行\n * @param {Number} col 目标像素的列\n * @returns {String} rgba值\n */\nfunction getRGBAValue$2 (data, srcWidth, srcHeight, row, col) {\n  let newRow = row;\n  let newCol = col;\n\n  if (newRow >= srcHeight) {\n    newRow = srcHeight - 1;\n  } else if (newRow < 0) {\n    newRow = 0;\n  }\n\n  if (newCol >= srcWidth) {\n    newCol = srcWidth - 1;\n  } else if (newCol < 0) {\n    newCol = 0;\n  }\n\n  let newIndex = newRow * srcWidth + newCol;\n\n  newIndex *= 4;\n\n  return [data[newIndex + 0], data[newIndex + 1], data[newIndex + 2], data[newIndex + 3]];\n}\n\nfunction scale$3 (data, width, height, newData, newWidth, newHeight) {\n  const dstData = newData;\n\n  // 计算压缩后的缩放比\n  const scaleW = newWidth / width;\n  const scaleH = newHeight / height;\n\n  const filter = function filter (dstCol, dstRow) {\n    // 源图像中的坐标（可能是一个浮点）\n    const srcCol = Math.min(width - 1, dstCol / scaleW);\n    const srcRow = Math.min(height - 1, dstRow / scaleH);\n    const intCol = Math.floor(srcCol);\n    const intRow = Math.floor(srcRow);\n    // 计算u和v\n    const u = srcCol - intCol;\n    const v = srcRow - intRow;\n\n    // 真实的index，因为数组是一维的\n    let dstI = dstRow * newWidth + dstCol;\n\n    dstI *= 4;\n\n    // 存储灰度值的权重卷积和\n    const rgbaData = [0, 0, 0, 0];\n\n    // 根据数学推导，16个点的f1*f2加起来是趋近于1的（可能会有浮点误差）\n    // 因此就不再单独先加权值，再除了\n    // 16个邻近点\n    for (let m = -1; m <= 2; m += 1) {\n      for (let n = -1; n <= 2; n += 1) {\n        const rgba = getRGBAValue$2(data, width, height, intRow + m, intCol + n);\n        // 一定要正确区分 m,n和u,v对应的关系，否则会造成图像严重偏差（譬如出现噪点等）\n        // F(row + m, col + n)S(m - v)S(n - u)\n        const f1 = interpolationCalculate(m - v);\n        const f2 = interpolationCalculate(n - u);\n        const weight = f1 * f2;\n\n        rgbaData[0] += rgba[0] * weight;\n        rgbaData[1] += rgba[1] * weight;\n        rgbaData[2] += rgba[2] * weight;\n        rgbaData[3] += rgba[3] * weight;\n      }\n    }\n\n    dstData[dstI + 0] = getPixelValue$1(rgbaData[0]);\n    dstData[dstI + 1] = getPixelValue$1(rgbaData[1]);\n    dstData[dstI + 2] = getPixelValue$1(rgbaData[2]);\n    dstData[dstI + 3] = getPixelValue$1(rgbaData[3]);\n  };\n\n  // 区块\n  for (let col = 0; col < newWidth; col += 1) {\n    for (let row = 0; row < newHeight; row += 1) {\n      filter(col, row);\n    }\n  }\n}\n\nfunction bicubicInterpolation$1 (imgData, newImgData) {\n  scale$3(imgData.data, imgData.width, imgData.height, newImgData.data, newImgData.width, newImgData.height);\n\n  return newImgData;\n}\n\nfunction extend (target) {\n  const finalTarget = target;\n\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  rest.forEach((source) => {\n    source && Object.keys(source).forEach((key) => {\n      finalTarget[key] = source[key];\n    });\n  });\n\n  return finalTarget;\n}\n\n/**\n * 选择这段代码用到的太多了，因此抽取封装出来\n * @param {Object} element dom元素或者selector\n * @return {HTMLElement} 返回选择的Dom对象，无果没有符合要求的，则返回null\n */\n\n/**\n * 获取DOM的可视区高度，兼容PC上的body高度获取\n * 因为在通过body获取时，在PC上会有CSS1Compat形式，所以需要兼容\n * @param {HTMLElement} dom 需要获取可视区高度的dom,对body对象有特殊的兼容方案\n * @return {Number} 返回最终的高度\n */\n\n/**\n * 设置一个Util对象下的命名空间\n * @param {Object} parent 需要绑定到哪一个对象上\n * @param {String} namespace 需要绑定的命名空间名\n * @param {Object} target 需要绑定的目标对象\n * @return {Object} 返回最终的对象\n */\n\nconst defaultArgs = {\n  width: 80,\n  height: 80,\n  mime: 'image/png',\n  // 0: nearestNeighbor\n  // 1: bilinearInterpolation\n  // 2: bicubicInterpolation\n  // 3: bicubicInterpolation2\n  processType: 1\n};\n\nconst defaultArgsCompress = {\n  // 压缩质量\n  quality: 0.92,\n  mime: 'image/jpeg',\n  // 压缩时的放大系数，默认为1，如果增大，代表图像的尺寸会变大(最大不会超过原图)\n  compressScaleRatio: 1,\n  // ios的iPhone下主动放大一定系数以解决分辨率过小的模糊问题\n  iphoneFixedRatio: 1.5,\n  // 是否采用原图像素（不会改变大小）\n  isUseOriginSize: false,\n  // 增加最大宽度，增加后最大不会超过这个宽度\n  maxWidth: 0,\n  // 使用强制的宽度，如果使用，其它宽高比系数都会失效，默认整图使用这个宽度\n  forceWidth: 0,\n  // 同上，但是一般不建议设置，因为很可能会改变宽高比导致拉升，特殊场景下使用\n  forceHeight: 0\n};\n\nfunction scaleMixin (ImageScale) {\n  const api = ImageScale;\n\n  /**\n   * 对ImageData类型的数据进行缩放，将数据放入新的imageData中\n   * @param {ImageData} imageData 目标ImageData\n   * @param {ImageData} newImageData 新的ImageData\n   * @param {Object} args 额外参数\n   */\n  api.scaleImageData = function scaleImageData (imageData, newImageData, args) {\n    const finalArgs = extend({}, defaultArgs, args);\n    const processTypes = [nearestNeighborInterpolation, bilinearInterpolation, bicubicInterpolation, bicubicInterpolation$1];\n    const curDealFunc = processTypes[finalArgs.processType];\n\n    curDealFunc(imageData, newImageData);\n  };\n\n  /**\n   * 对Image类型的对象进行缩放，返回一个base64字符串\n   * @param {Image} image 目标Image\n   * @param {Object} args 额外参数\n   * @return {String} 返回目标图片的b64字符串\n   */\n  api.scaleImage = function scaleImage (image, args) {\n    const { width } = image;\n    const { height } = image;\n    const finalArgs = extend({}, defaultArgs, args);\n\n    const canvasTransfer = document.createElement('canvas');\n    const ctxTransfer = canvasTransfer.getContext('2d');\n\n    canvasTransfer.width = width;\n    canvasTransfer.height = height;\n\n    ctxTransfer.drawImage(image, 0, 0, width, height);\n\n    const imageData = ctxTransfer.getImageData(0, 0, width, height);\n    const newImageData = ctxTransfer.createImageData(finalArgs.width, finalArgs.height);\n\n    api.scaleImageData(imageData, newImageData, finalArgs);\n\n    canvasTransfer.width = newImageData.width;\n    canvasTransfer.height = newImageData.height;\n\n    ctxTransfer.putImageData(newImageData, 0, 0, 0, 0, canvasTransfer.width, canvasTransfer.height);\n\n    // console.log(imageData);\n    // console.log(newImageData);\n    // console.log('压缩时w:' + canvasTransfer.width + ',' + canvasTransfer.height);\n\n    return canvasTransfer.toDataURL(finalArgs.mime, 0.9);\n  };\n\n  function getPixelRatio (context) {\n    const backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n\n    const ratio = (window.devicePixelRatio || 1) / backingStore;\n\n    return ratio;\n  }\n\n  /**\n   * 压缩图片，返回一个base64字符串\n   * 与scale的区别是这用的是canvas默认缩放，并且有很多参数可控\n   * @param {Image} image 目标Image\n   * @param {Object} args 额外参数\n   * @return {String} 返回目标图片的b64字符串\n   */\n  api.compressImage = function compressImage (image, args) {\n    const { width } = image;\n    const { height } = image;\n    const wPerH = width / height;\n    const finalArgs = extend({}, defaultArgsCompress, args);\n\n    const canvasTransfer = document.createElement('canvas');\n    const ctxTransfer = canvasTransfer.getContext('2d');\n\n    let ratio = getPixelRatio(ctxTransfer);\n\n    ratio *= finalArgs.compressScaleRatio || 1;\n    if (navigator.userAgent.match(/(iPhone\\sOS)\\s([\\d_]+)/)) {\n      ratio *= finalArgs.iphoneFixedRatio || 1;\n    }\n\n    let finalWidth = window.innerWidth * ratio;\n\n    if (finalArgs.isUseOriginSize || finalWidth > width) {\n      // 最大不会超过原图的尺寸\n      finalWidth = width;\n    }\n\n    const { maxWidth } = finalArgs;\n\n    if (maxWidth && width > maxWidth && finalWidth > maxWidth) {\n      // 考虑到之前已经进行不超过原图的判断了\n      finalWidth = maxWidth;\n    }\n    const { forceWidth } = finalArgs;\n    const { forceHeight } = finalArgs;\n\n    if (forceWidth) {\n      // 使用固定宽\n      finalWidth = forceWidth;\n    }\n\n    let finalHeight = finalWidth / wPerH;\n\n    if (forceHeight) {\n      finalHeight = forceHeight;\n    }\n\n    canvasTransfer.width = finalWidth;\n    canvasTransfer.height = finalHeight;\n    ctxTransfer.drawImage(image, 0, 0, width, height, 0, 0, canvasTransfer.width, canvasTransfer.height);\n\n    return canvasTransfer.toDataURL(finalArgs.mime, finalArgs.quality);\n  };\n}\n\nconst ImageScale = {};\n\nscaleMixin(ImageScale);\n\nexport default ImageScale;\n"]}]}