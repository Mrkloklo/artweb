{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/gujiahao/Documents/work/github/artweb/src/utils/base64.js","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/utils/base64.js","mtime":1588230106647},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/thread-loader/dist/cjs.js","mtime":1579587183081},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1579587173378}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\n\n/*\n * @Author: guotq\n * @Date: 2019-04-02 17:04:21\n * @Last Modified by: guotq\n * @Last Modified time: 2019-04-03 09:02:16\n * @Description: 关于 base64 的一些操作\n * 比如 base64 转换为 blob 对象\n * 或者 blob 对象转换成 base64\n * 去除 base64 url 部分\n * 获取 base64 url 部分\n * 获取 base64 的 mime 类型\n */\nexport default {\n  /**\n   * base64 转换成 blob 对象\n   * @param {String} b64 base64值\n   * @returns {Object} blob对象\n   */\n  base64ToBlob: function base64ToBlob(b64) {\n    var arr = b64.split(','); // 解码 b64 并且转换成 btype\n\n    var btypes = window.atob(arr[1]);\n    var mime = this.getMime(arr[0]); // 处理异常，将 ascii 码小于 0 的转换为大于 0 的\n\n    var ab = new ArrayBuffer(btypes.length); // 生成识图（直接针对内存）：8位无符号整数，长度1个字节\n\n    var ia = new Uint8Array(ab);\n\n    for (var i = 0, len = btypes.length; i < len; i++) {\n      ia[i] = btypes.charCodeAt(i);\n    }\n\n    return new Blob([ab], {\n      type: mime\n    });\n  },\n\n  /*\n   * blob 转换成 base64 对象\n   * @param {object} blob 文件对象\n   * @param {Function} callback 回调函数\n   * returns {String} 该文件的base64值\n   */\n  blobToBase64: function blobToBase64(blob, callback) {\n    var fileReader = new FileReader();\n    var that = this;\n    fileReader.readAsDataURL(blob);\n\n    fileReader.onload = function (e) {\n      callback && callback.call(that, e.target.result);\n    };\n  },\n\n  /**\n   * 获取 base64 的类型\n   * @param {String} b64 base64值\n   * @returns {String} mime 类型\n   */\n  getMime: function getMime(b64) {\n    return b64.match(/:(.*);/)[1];\n  },\n\n  /**\n   * 获取 base64 的 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 的 url 部分\n   */\n  getBase64Url: function getBase64Url(b64) {\n    return b64.match(/(.*),/)[1];\n  },\n\n  /**\n   * 获取 base64 去除 url 部分\n   * @param {String} b64 base64值\n   * @returns {String} 该 base64 去除 url 后的值\n   */\n  getBase64NotUrl: function getBase64NotUrl(b64) {\n    return b64.replace(/^data.*,/, '');\n  }\n};",null]}