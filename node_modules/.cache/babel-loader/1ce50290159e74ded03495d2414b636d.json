{"remainingRequest":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js!/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gujiahao/Documents/work/github/artweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gujiahao/Documents/work/github/artweb/src/components/gridunlock.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gujiahao/Documents/work/github/artweb/src/components/gridunlock.vue","mtime":1588230106505},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/babel-loader/lib/index.js","mtime":1585810045725},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/cache-loader/dist/cjs.js","mtime":1579587180818},{"path":"/Users/gujiahao/Documents/work/github/artweb/node_modules/vue-loader/lib/index.js","mtime":1585810053320}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nexport default {\n  name: 'GridUnlock',\n  props: {\n    r: {\n      type: Number,\n      default: 26\n    },\n    cw: {\n      type: Number,\n      default: window.screen.width\n    },\n    ch: {\n      type: Number,\n      default: 320\n    },\n    outRoundBorderColor: {\n      type: String,\n      default: '#666'\n    },\n    lineWidth: {\n      type: Number,\n      default: 3\n    },\n    lineColor: {\n      type: String,\n      default: '#f00'\n    },\n    outRoundColor: {\n      type: String,\n      default: '#fff'\n    },\n    innerRoundColor: {\n      type: String,\n      default: '#008080'\n    },\n    offsetX: {\n      type: Number,\n      default: 15\n    },\n    offsetY: {\n      type: Number,\n      default: 15\n    }\n  },\n  data: function data() {\n    return {\n      pointArr: [],\n      offsetTop: 0,\n      ctx: null\n    };\n  },\n  methods: {\n    _initGridunlock: function _initGridunlock() {\n      var canvas = this.$refs.canvas;\n      var ctx = canvas.getContext('2d');\n      this.ctx = ctx;\n      this.offsetTop = this._getOffsetTop(canvas) || 0;\n      this.pointArr = this._drawLocalPoint((this.cw - 2 * this.offsetX - this.r * 2 * 3) / 2, (this.ch - 2 * this.offsetY - this.r * 2 * 3) / 2);\n\n      this._initListeners(canvas, ctx);\n\n      this._draw(this.pointArr, [], null, ctx);\n    },\n    _getOffsetTop: function _getOffsetTop(canvas) {\n      var offsetTop = 0;\n      var parentElement = canvas.parentElement;\n\n      while (parentElement && parentElement.nodeType === 1 && parentElement.tagName !== 'body') {\n        offsetTop += parentElement.offsetTop;\n        parentElement = parentElement.parentElement;\n      }\n\n      return offsetTop;\n    },\n\n    /**\n     * 计算画布9个点\n     * @param {Number} x 坐标\n     * @param {Number} y 坐标\n     * @returns {Array} result 坐标数组\n     * @private\n     */\n    _drawLocalPoint: function _drawLocalPoint(x, y) {\n      var result = [];\n      var offsetX = this.offsetX;\n      var offsetY = this.offsetY;\n      var r = this.r;\n\n      for (var row = 0; row < 3; row++) {\n        for (var col = 0; col < 3; col++) {\n          var ninePoint = {\n            x: offsetX + col * x + (col * 2 + 1) * r,\n            y: offsetY + row * y + (row * 2 + 1) * r\n          };\n          result.push(ninePoint);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @param {HTMLElement} canvas el\n     * @param {Object} ctx CanvasRenderingContext2D\n     * @private\n     */\n    _initListeners: function _initListeners(canvas, ctx) {\n      var _this = this;\n\n      var linePoint = [];\n      var cw = this.cw;\n      var ch = this.ch;\n      canvas.addEventListener('touchstart', function (e) {\n        e.preventDefault();\n\n        _this._selectPoint(e.touches[0], linePoint);\n      }, {\n        passive: false\n      });\n      canvas.addEventListener('touchmove', function (e) {\n        e.preventDefault();\n        var touches = e.touches[0];\n\n        _this._selectPoint(touches, linePoint);\n\n        ctx.clearRect(0, 0, cw, ch);\n\n        _this._draw(_this.pointArr, linePoint, {\n          x: touches.pageX,\n          y: touches.pageY - _this.offsetTop\n        }, ctx);\n      }, {\n        passive: false\n      });\n      canvas.addEventListener('touchend', function (e) {\n        ctx.clearRect(0, 0, cw, ch);\n\n        _this._draw(_this.pointArr, linePoint, null, ctx);\n\n        _this.$emit('success', linePoint);\n\n        linePoint = [];\n      });\n    },\n\n    /**\n     * 选点\n     * @param {event} touches 坐标\n     * @param {Array} LinePoint 已选择的点\n     * @private\n     */\n    _selectPoint: function _selectPoint(touches, LinePoint) {\n      var pointArr = this.pointArr;\n\n      for (var i = 0, len = pointArr.length; i < len; i++) {\n        var curPoint = pointArr[i];\n        var xDiff = Math.abs(curPoint.x - touches.pageX);\n        var yDiff = Math.abs(curPoint.y - (touches.pageY - this.offsetTop));\n        var dir = Math.pow(xDiff * xDiff + yDiff * yDiff, 0.5);\n\n        if (dir < this.r) {\n          if (LinePoint.indexOf(i) < 0) {\n            LinePoint.push(i);\n          }\n\n          break;\n        }\n      }\n    },\n\n    /**\n     * 绘制圆点\n     * @param {Array} pointArr 画布9个点\n     * @param {Array} linePointArr 存储已连点\n     * @param {Object} touchPoint 触摸点\n     * @param {Object} ctx canvas画笔\n     * @private\n     */\n    _draw: function _draw(pointArr, linePointArr, touchPoint, ctx) {\n      var r = this.r;\n      var pI2 = Math.PI * 2;\n\n      if (linePointArr.length > 0) {\n        ctx.beginPath();\n\n        for (var i = 0, len = linePointArr.length; i < len; i++) {\n          var index = linePointArr[i];\n          ctx.lineTo(pointArr[index].x, pointArr[index].y);\n        }\n\n        ctx.lineWidth = this.lineWidth;\n        ctx.strokeStyle = this.lineColor;\n        ctx.stroke();\n        ctx.closePath();\n\n        if (touchPoint) {\n          var lastIndex = linePointArr[linePointArr.length - 1];\n          var lastPoint = pointArr[lastIndex];\n          ctx.beginPath();\n          ctx.moveTo(lastPoint.x, lastPoint.y);\n          ctx.lineTo(touchPoint.x, touchPoint.y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      }\n\n      for (var _i = 0, _len = pointArr.length; _i < _len; _i++) {\n        var point = pointArr[_i];\n        ctx.fillStyle = this.outRoundBorderColor;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, r, 0, pI2, true);\n        ctx.closePath();\n        ctx.fill();\n        ctx.fillStyle = this.outRoundColor;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, r - 3, 0, pI2, true);\n        ctx.closePath();\n        ctx.fill();\n\n        if (linePointArr.indexOf(_i) >= 0) {\n          ctx.fillStyle = this.innerRoundColor;\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, r - 16, 0, pI2, true);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    },\n    reset: function reset() {\n      this.ctx.clearRect(0, 0, this.cw, this.ch);\n    }\n  },\n  mounted: function mounted() {\n    this._initGridunlock();\n  }\n};",{"version":3,"sources":["gridunlock.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <canvas :width=\"cw\" :height=\"ch\" ref=\"canvas\"></canvas>\n</template>\n\n<script>\nexport default {\n  name: 'GridUnlock',\n  props: {\n    r: {\n      type: Number,\n      default: 26\n    },\n    cw: {\n      type: Number,\n      default: window.screen.width\n    },\n    ch: {\n      type: Number,\n      default: 320\n    },\n    outRoundBorderColor: {\n      type: String,\n      default: '#666'\n    },\n    lineWidth: {\n      type: Number,\n      default: 3\n    },\n    lineColor: {\n      type: String,\n      default: '#f00'\n    },\n    outRoundColor: {\n      type: String,\n      default: '#fff'\n    },\n    innerRoundColor: {\n      type: String,\n      default: '#008080'\n    },\n    offsetX: {\n      type: Number,\n      default: 15\n    },\n    offsetY: {\n      type: Number,\n      default: 15\n    }\n  },\n  data () {\n    return {\n      pointArr: [],\n      offsetTop: 0,\n      ctx: null\n    };\n  },\n  methods: {\n    _initGridunlock () {\n      const { canvas } = this.$refs;\n      const ctx = canvas.getContext('2d');\n\n      this.ctx = ctx;\n      this.offsetTop = this._getOffsetTop(canvas) || 0;\n      this.pointArr = this._drawLocalPoint((this.cw - 2 * this.offsetX - this.r * 2 * 3) / 2, (this.ch - 2 * this.offsetY - this.r * 2 * 3) / 2);\n      this._initListeners(canvas, ctx);\n      this._draw(this.pointArr, [], null, ctx);\n    },\n\n    _getOffsetTop (canvas) {\n      let offsetTop = 0;\n      let { parentElement } = canvas;\n\n      while (parentElement && parentElement.nodeType === 1 && parentElement.tagName !== 'body') {\n        offsetTop += parentElement.offsetTop;\n        parentElement = parentElement.parentElement;\n      }\n\n      return offsetTop;\n    },\n\n    /**\n     * 计算画布9个点\n     * @param {Number} x 坐标\n     * @param {Number} y 坐标\n     * @returns {Array} result 坐标数组\n     * @private\n     */\n    _drawLocalPoint (x, y) {\n      const result = [];\n      const { offsetX } = this;\n      const { offsetY } = this;\n      const { r } = this;\n\n      for (let row = 0; row < 3; row++) {\n        for (let col = 0; col < 3; col++) {\n          const ninePoint = {\n            x: (offsetX + col * x + (col * 2 + 1) * r),\n            y: (offsetY + row * y + (row * 2 + 1) * r)\n          };\n\n          result.push(ninePoint);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * @param {HTMLElement} canvas el\n     * @param {Object} ctx CanvasRenderingContext2D\n     * @private\n     */\n    _initListeners (canvas, ctx) {\n      let linePoint = [];\n      const { cw } = this;\n      const { ch } = this;\n\n      canvas.addEventListener('touchstart', (e) => {\n        e.preventDefault();\n        this._selectPoint(e.touches[0], linePoint);\n      }, {\n        passive: false\n      });\n\n      canvas.addEventListener('touchmove', (e) => {\n        e.preventDefault();\n\n        const touches = e.touches[0];\n\n        this._selectPoint(touches, linePoint);\n\n        ctx.clearRect(0, 0, cw, ch);\n\n        this._draw(this.pointArr, linePoint, {\n          x: touches.pageX,\n          y: touches.pageY - this.offsetTop\n        }, ctx);\n      }, {\n        passive: false\n      });\n\n      canvas.addEventListener('touchend', (e) => {\n        ctx.clearRect(0, 0, cw, ch);\n        this._draw(this.pointArr, linePoint, null, ctx);\n        this.$emit('success', linePoint);\n        linePoint = [];\n      });\n    },\n\n    /**\n     * 选点\n     * @param {event} touches 坐标\n     * @param {Array} LinePoint 已选择的点\n     * @private\n     */\n    _selectPoint (touches, LinePoint) {\n      const { pointArr } = this;\n\n      for (let i = 0, len = pointArr.length; i < len; i++) {\n        const curPoint = pointArr[i];\n        const xDiff = Math.abs(curPoint.x - touches.pageX);\n        const yDiff = Math.abs(curPoint.y - (touches.pageY - this.offsetTop));\n        const dir = Math.pow((xDiff * xDiff + yDiff * yDiff), 0.5);\n\n        if (dir < this.r) {\n          if (LinePoint.indexOf(i) < 0) {\n            LinePoint.push(i);\n          }\n          break;\n        }\n      }\n    },\n\n    /**\n     * 绘制圆点\n     * @param {Array} pointArr 画布9个点\n     * @param {Array} linePointArr 存储已连点\n     * @param {Object} touchPoint 触摸点\n     * @param {Object} ctx canvas画笔\n     * @private\n     */\n    _draw (pointArr, linePointArr, touchPoint, ctx) {\n      const { r } = this;\n      const pI2 = Math.PI * 2;\n\n      if (linePointArr.length > 0) {\n        ctx.beginPath();\n        for (let i = 0, len = linePointArr.length; i < len; i++) {\n          const index = linePointArr[i];\n\n          ctx.lineTo(pointArr[index].x, pointArr[index].y);\n        }\n\n        ctx.lineWidth = this.lineWidth;\n        ctx.strokeStyle = this.lineColor;\n        ctx.stroke();\n        ctx.closePath();\n\n        if (touchPoint) {\n          const lastIndex = linePointArr[linePointArr.length - 1];\n          const lastPoint = pointArr[lastIndex];\n\n          ctx.beginPath();\n          ctx.moveTo(lastPoint.x, lastPoint.y);\n          ctx.lineTo(touchPoint.x, touchPoint.y);\n          ctx.stroke();\n          ctx.closePath();\n        }\n      }\n\n      for (let i = 0, len = pointArr.length; i < len; i++) {\n        const point = pointArr[i];\n\n        ctx.fillStyle = this.outRoundBorderColor;\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, r, 0, pI2, true);\n        ctx.closePath();\n\n        ctx.fill();\n        ctx.fillStyle = this.outRoundColor;\n\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, r - 3, 0, pI2, true);\n        ctx.closePath();\n        ctx.fill();\n\n        if (linePointArr.indexOf(i) >= 0) {\n          ctx.fillStyle = this.innerRoundColor;\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, r - 16, 0, pI2, true);\n          ctx.closePath();\n          ctx.fill();\n        }\n      }\n    },\n\n    reset () {\n      this.ctx.clearRect(0, 0, this.cw, this.ch);\n    }\n  },\n  mounted () {\n    this._initGridunlock();\n  }\n};\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/components"}]}